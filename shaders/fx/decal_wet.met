//new
using settemplates;
using engineflags;
using tmu;

template
{
    category Main
    {

        string_dat s_msk = s_tex_def;
        bool_dat b_instancing_on = FALSE;
    }

    templatebody()
    {
        tech("opq_clr")
        {
            Cull(CW);
            BlendFunc(ONE, INV_SRC_ALPHA, ONE, ONE);
            DepthFunc(LEQUAL, FALSE);
            AlphaFunc(GREATER, 0.0);

            C_NRM_SCALE_CST = SetConst(0.2, 0.2, 0.0);
            C_NRM_BIAS_CST = SetConst(-0.1, -0.1, 1.0);
            C_ADF_CST = SetConst(1.0 / (0.6 - 0.25), -0.25 / (0.6 - 0.25));

			use PP_NORMAL_TMU();
            S_NRM_1 = SetTexture("noise_b.dds", LINEAR_MIP_LINEAR, WRAP, WRAP, FALSE);
            S_ENV = SetTextureCUBE("interior_cube_map.dds", LINEAR_MIP_LINEAR, CLAMP, CLAMP, FALSE);

            if( s_msk == s_tex_def )
            {
                S_MSK_0 = SetTexture(0);
            }
            else
            {
                S_MSK_0 = SetTexture(s_msk);
            }

            X_NRM_WS_TC = SetTexcoord3();
            X_TNG_WS_TC = SetTexcoord3();
            X_BNR_WS_TC = SetTexcoord3();
            X_CAM_DIR_TC = SetTexcoord3();
            X_UV_0_TC = SetTexcoord2();
            X_UV_1_TC = SetTexcoord2();
            X_UV_2_TC = SetTexcoord2();

			SetFixedUV(X_UV_0_TC);

            Input I_POS_0 = new InputFloat4("POSITION");
            Input I_UV_CHANNEL_0 = new InputFloat2("TEXCOORD0");
            Input I_NRM_0 = new InputFloat3("NORMAL0");
            Input I_TNG_0 = new InputFloat4("TANGENT0");

            Output O_CLR_OUT = new OutputFLOAT4("COLOR0");

            VertexShader()
            {
                if(b_instancing_on) { use Instancing(); }

                hlsl()
                {

                    #include <master_new.hlsl>

                    void main()
                    {
                            float4 v_pos_ms;
                            v_pos_ms = I_POS_0;

                            I_UV_CHANNEL_0 = Decode_UV(I_UV_CHANNEL_0);

                            v_pos_ms = Decode_Pos(v_pos_ms);

                            float3 v_nrm_ms = I_NRM_0.xyz;
                            float3 v_tng_ms = I_TNG_0.xyz;

                            float f_tng_w;

                            f_tng_w = I_TNG_0.w;

                            float4 v_pos_ws = float4(1.0, 1.0, 1.0, 1.0);
                            v_pos_ws = Mul_Pos(v_pos_ms, MODEL_XFORM_4x3);

                            float3 v_nrm_ws = v_nrm_ms.xyz;
                            v_nrm_ws = Mul33(v_nrm_ms.xyz, MODEL_XFORM_4x3);
                            v_nrm_ws = normalize(v_nrm_ws);

                            float3 v_tng_ws = v_tng_ms.xyz;
                            v_tng_ws = Mul33(v_tng_ws, MODEL_XFORM_4x3);
                            v_tng_ws = normalize(v_tng_ws);

                            float3 v_cam_dir_ws = CAMERA_POS_WS.xyz - v_pos_ws.xyz;
                            float3 v_cam_dir_n_ws = normalize(v_cam_dir_ws);

                            float f_cam_dir_length = length(v_cam_dir_ws);

                            V_POS_OUT_TC = Pos_Out_WS(v_pos_ws);
                            X_CAM_DIR_TC = Mul33(v_cam_dir_ws, VIEW_XFORM);

                            X_NRM_WS_TC = Mul33(v_nrm_ws, VIEW_XFORM);

                            X_TNG_WS_TC = Mul33(v_tng_ws, VIEW_XFORM);

                            X_BNR_WS_TC = cross(X_NRM_WS_TC, X_TNG_WS_TC) * f_tng_w;

                            X_UV_0_TC = I_UV_CHANNEL_0;

                            X_UV_1_TC = (I_UV_CHANNEL_0 + TIME * float2(0.05,0.17)) * 5.1 ;

                            X_UV_2_TC = (I_UV_CHANNEL_0 + TIME * float2(0.0,0.33)) * 1.11 ;
                    }
                }

            }

            PixelShader()
            {
                hlsl()
                {
                    #include <master_new.hlsl>

                    void main()
                    {
                        FLOAT3 v_cam_dir_n = normalize(X_CAM_DIR_TC);

                        FLOAT2 v_uv_screen = UV_Screen(V_POS_SS_TC);

                        FLOAT3 I_NRM_0 = Normal_bx2_Sample(v_uv_screen).xyz;

                        FLOAT4 v_msk = Sample(S_MSK_0, X_UV_0_TC);
                        FLOAT3 v_nrm_1 = Sample(S_NRM_1, X_UV_1_TC).aga;
                        FLOAT3 v_nrm_2 = Sample(S_NRM_1, X_UV_2_TC).aga;

                        float3 M_TS2WS[3];
                        M_TS2WS[0] = X_TNG_WS_TC;
                        M_TS2WS[1] = X_BNR_WS_TC;
                        M_TS2WS[2] = X_NRM_WS_TC;

                        FLOAT3 v_nrm_ts = Mul33(I_NRM_0 * 2.0 - 1.0, M_TS2WS) * 0.5 + 0.5;
                        v_nrm_ts = v_nrm_ts.zyz;

                        I_NRM_0 = v_nrm_ts * FLOAT3(2.0, 2.0, 0.0) + FLOAT3(-1.0, -1.0, 1.0);
                        v_nrm_1 = v_nrm_1 * C_NRM_SCALE_CST + C_NRM_BIAS_CST;
                        v_nrm_2 = v_nrm_2 * C_NRM_SCALE_CST + C_NRM_BIAS_CST;

                        FLOAT3 v_nrm = normalize(I_NRM_0 + v_nrm_1 + v_nrm_2);
                        v_nrm = Mul33T(v_nrm, M_TS2WS);
                        FLOAT3 v_nrm_n = normalize(v_nrm);

                        FLOAT f_falloff = 1.0 - saturate(dot(v_cam_dir_n, v_nrm_n));
                        f_falloff *= f_falloff;

                        FLOAT3 v_rfl = Mul33( reflect( -v_cam_dir_n, v_nrm_n ), INVVIEW_XFORM );
                        FLOAT4 v_env = SampleCUBE(S_ENV, v_rfl, 0.0);

                        O_CLR_OUT.xyz = v_env.rgb * saturate(f_falloff * 0.8 + 0.2) * saturate(v_msk.g * C_ADF_CST.x + C_ADF_CST.y);
                        O_CLR_OUT.w = v_msk.g * 0.5;
                    }
                }
            }
        }
    }
}


