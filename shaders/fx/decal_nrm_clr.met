//new
using settemplates;
using engineflags;

public class Parallax_Variants : StringVariantConv
{
	public static object[] Data = { "\"Parallax\"", "\"Relief\"" };
	public override object[] GetData() {return Data;}
}

public class AlphaSource_Variants : StringVariantConv
{
	public static object[] Data = { "\"Texture Red\"", "\"Texture Green\"", "\"Texture Blue\"", "\"Texture Alpha\"", "\"Texture Red Inverted\"", "\"Texture Green Inverted\"", "\"Texture Blue Inverted\"", "\"Texture Alpha Inverted\"", "\"RGB Luminance\"", "\"RGB Luminance Inverted\"", "\"Zero\"", "\"One\"" };
	public override object[] GetData() {return Data;}
}

public class Blending_Variants : StringVariantConv
{
	public static object[] Data = { "\"lerp\"", "\"add\"", "\"mul\"", "\"mul_inv\"", "\"none\"" };
	public override object[] GetData() {return Data;}
}

template 
{ 
    category Basic
    {
		class Main
		{	
			string_dat clr_0_tex = "" : editor(ImageFileNameEditor), display(Color texture);
			string_dat nrm_0_tex = "" : editor(ImageFileNameEditor), display(Normal texture);
			bool_dat decal_on = FALSE : display(Decal toggle);
			bool_dat usr_clr_0_on = FALSE : display(User Color 0 enabled);
			bool_dat usr_clr_1_on = FALSE : display(User Color 1 enabled);
			bool_dat vrt_clr_on = FALSE : display(Vertex Color enabled);
			
			bool_dat occlusion_on = FALSE;			
			
		}
		class Parallax
		{
			string_dat hgt_0_tex = "" : editor(ImageFileNameEditor), display(Height texture);
			float_dat parallax_scale = 0.0 : display(Parallax scale);			
		}
    }
    category Advanced
    {
		class Factors
		{
			vec3_dat clr_0_factor = vec(1.0, 1.0, 1.0) : editor(ColorRGBEditor), display(Color);
			float_dat nrm_0_factor = 1.0 : display(Normal scale);
		}	
		class Sampling
		{
			int_dat tex_tile_u = WRAP : converter(TexTile_Variants), display(U tiling);
			int_dat tex_tile_v = WRAP : converter(TexTile_Variants), display(V tiling);
		}
		class Blending
		{
			bool_dat blend_0_on = TRUE : display(RT 0 blending enabled);
			bool_dat blend_1_on = TRUE : display(RT 1 blending enabled);
			string_dat blend_mode_rgb = "lerp" : converter(Blending_Variants), display(RGB blending mode);
			string_dat blend_mode_a = "none" : converter(Blending_Variants), display(Alpha blending mode);
			float_dat alpha_0_factor = 1.0 : display(RT 0 Alpha blending factor);
			float_dat alpha_1_factor = 1.0 : display(RT 1 Alpha blending factor);
			string_dat alpha_source = "Texture Alpha" : converter(AlphaSource_Variants), display(Mask source);
		}
		class Write Output
		{	
			bool_dat out_0_r_on = TRUE : display(RT 0 Red enabled);
			bool_dat out_0_g_on = TRUE : display(RT 0 Green enabled);
			bool_dat out_0_b_on = TRUE : display(RT 0 Blue enabled);
			bool_dat out_0_a_on = FALSE : display(RT 0 Alpha enabled);
			bool_dat out_1_r_on = TRUE : display(RT 1 Red enabled);
			bool_dat out_1_g_on = TRUE : display(RT 1 Green enabled);
			bool_dat out_1_b_on = TRUE : display(RT 1 Blue enabled);
			bool_dat out_1_a_on = FALSE : display(RT 1 Alpha enabled);
		}
		class Alphatest
		{
			bool_dat clip_on = TRUE : display(Alphatest enabled);
		}
		class Parallax params
		{
			string_dat hgt = "Parallax" : converter(Parallax_Variants), display(Parallax technique);			
			float_dat parallax_mip = 0.0 : display(Parallax mipmap);	
			int_dat linear_search_steps = 5 : display(Relief linear search steps);
			int_dat binary_search_steps = 3 : display(Relief binary search steps);
			float_dat relief_linear_mip = 0.0 : display(Relief linear search mipmap);
			float_dat relief_binary_mip = 0.0 : display(Relief binary search mipmap);
		}
		class Wind
        {
			string_dat wind_weave_tex = "" : editor(ImageFileNameEditor), display(Wind Weave Weave);	
			string_dat wind_weave_msk = "" : editor(ImageFileNameEditor), display(Wind Weave Mask);				
			float_dat f_wind_weave_distor = 1.0 : editor(FloatSpinEditor), display(Weave Diffuse Deformation);
			float_dat f_wind_weave_uv_scale = 3.0 : editor(FloatSpinEditor), display(Weave UV Scale);
			float_dat f_wind_weave_uv_speed = 2.0 : editor(FloatSpinEditor), display(Weave UV speed);
			float_dat f_wind_weave_nrm_scale = 0.5 : editor(FloatSpinEditor), display(Weave Normal Scale);
			vec3_dat v_wind_direct_center = vec(0.0, 0.0, 0.0) : editor(ColorRGBEditor), display(Wind Direct Center);
        }
    }

    templatebody()
    { 
		bool_dat nrm_on = ((nrm_0_tex != "") | decal_on);

		extern int_dat SHADER_PATH;		
		bool_dat hgt_on = (hgt_0_tex != "") & ((SHADER_PATH == SM50) | (SHADER_PATH == SM51) | (SHADER_PATH == SM52));
		bool_dat tng_on = (nrm_on | hgt_on);
		usr_clr_0_on = usr_clr_0_on & !decal_on;
		vrt_clr_on = decal_on;
		usr_clr_1_on = usr_clr_1_on & !decal_on;
		
		string_dat technique = If( nrm_on, "opq_clr_nrm", "opq_clr");
		
        tech(technique)
        {                                  
			bool_dat blending_on = (blend_0_on | blend_1_on) & ((blend_mode_rgb != "none") | (blend_mode_a != "none"));
			
            Cull(CW);
            DepthFunc(LEQUAL, FALSE); 

			if(clip_on)
			{
				Define("CLIP_ON", 1);
				AlphaFunc(GREATER, 0.0);
			}
			
			if(blending_on)
			{
				int_dat bm_rgb_src = If(blend_mode_rgb == "lerp", SRC_ALPHA, ONE);
				int_dat bm_rgb_dst = If(blend_mode_rgb == "lerp", INV_SRC_ALPHA, ZERO);
				bm_rgb_src = If(blend_mode_rgb == "add", ONE, bm_rgb_src);
				bm_rgb_dst = If(blend_mode_rgb == "add", ONE, bm_rgb_dst);
				bm_rgb_src = If(blend_mode_rgb == "mul", ZERO, bm_rgb_src);
				bm_rgb_dst = If(blend_mode_rgb == "mul", SRC_COLOR, bm_rgb_dst);
				bm_rgb_src = If(blend_mode_rgb == "mul_inv", ZERO, bm_rgb_src);
				bm_rgb_dst = If(blend_mode_rgb == "mul_inv", INV_SRC_COLOR, bm_rgb_dst);

				int_dat bm_a_src = If(blend_mode_a == "lerp", SRC_ALPHA, ONE);
				int_dat bm_a_dst = If(blend_mode_a == "lerp", INV_SRC_ALPHA, ZERO);
				bm_a_src = If(blend_mode_a == "add", ONE, bm_a_src);
				bm_a_dst = If(blend_mode_a == "add", ONE, bm_a_dst);
				bm_a_src = If(blend_mode_a == "mul", ZERO, bm_a_src);
				bm_a_dst = If(blend_mode_a == "mul", SRC_ALPHA, bm_a_dst);
				bm_a_src = If(blend_mode_a == "mul_inv", ZERO, bm_a_src);
				bm_a_dst = If(blend_mode_a == "mul_inv", INV_SRC_ALPHA, bm_a_dst);

				if(blend_mode_rgb == "lerp") { Define("D_RGB_LERP_ON", 1); }
				if((blend_mode_rgb == "mul") | (blend_mode_rgb == "mul_inv")) { Define("D_RGB_MUL_ON", 1); }
				if(blend_mode_rgb == "add") { Define("D_RGB_ADD_ON", 1); }
				if(blend_mode_a == "lerp") { Define("D_A_LERP_ON", 1); }
				if((blend_mode_a == "mul") | (blend_mode_a == "mul_inv")) { Define("D_A_MUL_ON", 1); }
				if(blend_mode_a == "add") { Define("D_A_ADD_ON", 1); }
				
				if(blend_0_on)
				{
					BlendFunc(bm_rgb_src, bm_rgb_dst, bm_a_src, bm_a_dst);
					BlendFunc(bm_rgb_src, bm_rgb_dst, bm_a_src, bm_a_dst, 1);
				}
				if(blend_1_on)
				{
					BlendFunc(bm_rgb_src, bm_rgb_dst, bm_a_src, bm_a_dst, 2);
				}
			}
			
			Input I_POS_MS = new InputFloat4("POSITION");
            Input I_UV_0 = new InputFloat2("TEXCOORD0");                        
            Output O_SPC = new OutputFLOAT4("COLOR0"); 
            Output O_DIF = new OutputFLOAT4("COLOR1"); 
			
			//ColorFunc(out_0_r_on, out_0_g_on, out_0_b_on, out_0_a_on);
ColorFunc(FALSE, FALSE, FALSE, out_0_a_on);
			ColorFunc(out_0_r_on, out_0_g_on, out_0_b_on, out_0_a_on, 1);
			
            C_ALPHA_0_FACTOR = SetConst(alpha_0_factor);
            C_ALPHA_1_FACTOR = SetConst(alpha_1_factor);
            C_NRM_SCALE = SetConst(nrm_0_factor);

			if(usr_clr_0_on | usr_clr_1_on  | vrt_clr_on)
			{
				X_CLR = SetTexcoord4();
				
				if(usr_clr_0_on | usr_clr_1_on)
				{								
					Input I_CLR_USR = new InputFloat4("COLOR_USER");		
					
					if(usr_clr_0_on)
					{
						Define("D_USR_CLR_0_ON", 1);
					}
					
					if(usr_clr_1_on)
					{
						Define("D_USR_CLR_1_ON", 1);
					}
					
				}								
			}
			
			if(vrt_clr_on | occlusion_on)
			{
				Define("VRT_CLR_ON", 1);
				Input I_CLR_VRT = new InputFloat4("COLOR0");
			}
			
			
			if(decal_on)
			{								
				S_CLR = SetTexture2D(0, LINEAR_MIP_LINEAR, tex_tile_u, tex_tile_v, FALSE);                 								
				Define("DECAL_ON", 1);
			}			
			else
			{
				S_CLR = SetTexture2D(clr_0_tex, LINEAR_MIP_LINEAR, tex_tile_u, tex_tile_v, FALSE); 
			}

			if(alpha_source == "Texture Red")
			{
				Define("D_ALPHA_SOURCE__RED", 1);
			}
			if(alpha_source == "Texture Red Inverted")
			{
				Define("D_ALPHA_SOURCE__RED_INV", 1);
			}
			if(alpha_source == "Texture Green")
			{
				Define("D_ALPHA_SOURCE__GREEN", 1);
			}
			if(alpha_source == "Texture Green Inverted")
			{
				Define("D_ALPHA_SOURCE__GREEN_INV", 1);
			}
			if(alpha_source == "Texture Blue")
			{
				Define("D_ALPHA_SOURCE__BLUE", 1);
			}
			if(alpha_source == "Texture Blue Inverted")
			{
				Define("D_ALPHA_SOURCE__BLUE_INV", 1);
			}
			if(alpha_source == "Texture Alpha")
			{
				Define("D_ALPHA_SOURCE__ALPHA", 1);
			}
			if(alpha_source == "Texture Alpha Inverted")
			{
				Define("D_ALPHA_SOURCE__ALPHA_INV", 1);
			}
			if(alpha_source == "RGB Luminance")
			{
				Define("D_ALPHA_SOURCE__LUM", 1);
			}
			if(alpha_source == "RGB Luminance Inverted")
			{
				Define("D_ALPHA_SOURCE__LUM_INV", 1);
			}
			if(alpha_source == "Zero")
			{
				Define("D_ALPHA_SOURCE__ZERO", 1);
			}
			if(alpha_source == "One")
			{
				Define("D_ALPHA_SOURCE__ONE", 1);
			}
			
			if(occlusion_on)
			{
				Define("D_OCCLUSION_ON", 1);
				X_OCCLUSION = SetTexcoord("FLOAT");
			}
			
			if(hgt_on)
			{
				if(hgt == "Relief")
				{
					Define("D_RELIEF_ON", 1);
                    C_PARALLAX_SCALE = SetConst(parallax_scale);
					Define("I_RELIEF_LINEAR_STEPS", linear_search_steps);
					Define("I_RELIEF_BINARY_STEPS", binary_search_steps);
                    C_RELIEF_STEPS_INV = SetConst(1.0 / linear_search_steps);
                    C_RELIEF_LINEAR_MIP = SetConst(relief_linear_mip);
                    C_RELIEF_BINARY_MIP = SetConst(relief_binary_mip);
				}
				else
				{
					Define("D_PARALLAX_ON", 1);							
                    C_PARALLAX_SCALE = SetConst(parallax_scale);
                    C_PARALLAX_MIP = SetConst( parallax_mip );
				}
				
				S_HGT = SetTexture(hgt_0_tex, LINEAR_MIP_LINEAR, tex_tile_u, tex_tile_v, FALSE);
				
				X_CAM_DIR_TS = SetTexcoord3();
			}
			
			if(tng_on)
			{
				Define("TNG_ON", 1);
				Input I_TNG_MS = new InputFloat4("TANGENT");				
				Input I_NRM_MS = new InputFloat3("NORMAL0"); 
			}
			
			if(nrm_on)
			{
				ColorFunc(out_1_r_on, out_1_g_on, out_1_b_on, out_1_a_on, 2);

				if(decal_on)
				{
					S_NRM = SetTexture2D(1, ANISOTROPIC_MIP_POINT, tex_tile_u, tex_tile_v, FALSE); 
				}
				else
				{
					S_NRM = SetTexture2D(nrm_0_tex, ANISOTROPIC_MIP_POINT, tex_tile_u, tex_tile_v, FALSE); 
				}								          

                X_NRM_CS = SetTexcoord3();            
                X_TNG_CS = SetTexcoord3();            
                X_BNR_CS = SetTexcoord3();            
                                                                     
                Output O_NRM = new OutputFLOAT4("COLOR2");
			}

			if(wind_weave_tex != "")
			{
				extern float_dat TIME;
				extern float_dat f_pp_wind_offset;
				extern float_dat f_pp_omni_offset;
				
				Define ("D_WIND_WEAVE_ON", 1);
				S_WEAVE = SetTexture(wind_weave_tex);
	
                C_WIND_WEAVE_UV_SCALE = SetConst(f_wind_weave_uv_scale );
				C_WIND_WEAVE_UV_SPEED = SetConst( f_pp_wind_offset * f_wind_weave_uv_speed*2.0);			
                C_WIND_WEAVE_DIST = SetConst(f_wind_weave_distor *  0.003);
                C_WIND_WEAVE_NRM_FACTOR = SetConst(f_wind_weave_nrm_scale);
				X_UV_SOL = SetTexcoord2();
				X_WEAVE_MSK = SetTexcoord();
			}
			
			if(wind_weave_msk != "")
			{
				Define ("D_WIND_WEAVE_MSK", 1);
				S_WEAVE_MSK = SetTexture(wind_weave_msk);
			}
			
			X_UV_0 = SetTexcoord2();         
			SetFixedUV(X_UV_0);				
            
            VertexShader()
            {
                use Instancing();

                hlsl()
                {
                    #include <master_new.hlsl>
              		
					#if defined(D_WIND_WEAVE_ON)
						CONST_FLOAT f_wind_power;
						CONST_FLOAT4 v_pp_wind_2d_xform;
						CONST_FLOAT4 v_pp_wind_params_2; //temp
					#endif
                    void main()
                    {
						float4 v_pos_ms = I_POS_MS;

                        float2 v_uv_0 = Decode_UV(I_UV_0);

                        v_pos_ms = Decode_Pos(v_pos_ms);                            
                        
                        float4 pos_ws = float4(1.0, 1.0, 1.0, 1.0);
                        pos_ws = Mul_Pos(v_pos_ms, MODEL_XFORM_4x3); 
						
						#if defined(TNG_ON)
							float3 nrm_ws = Mul33(I_NRM_MS.xyz, MODEL_XFORM_4x3);                            
							float3 tng_ws = Mul33(I_TNG_MS.xyz, MODEL_XFORM_4x3);	
						#endif
						
						#if defined(X_NRM_CS)                                                                                                               
                            X_NRM_CS = normalize(Mul33(nrm_ws, VIEW_XFORM));
                            
							float3 tng_cs = Mul33(tng_ws, VIEW_XFORM);
							float3 tng_n_cs = normalize(tng_cs);
							X_TNG_CS = tng_n_cs;
							
							float3 bnr_n_cs = cross(X_NRM_CS, X_TNG_CS);
							bnr_n_cs *= I_TNG_MS.w;
							X_BNR_CS = bnr_n_cs;
                        #endif	
						
						#if defined(X_CAM_DIR_TS)
							float3 w2t_xform[3];
							w2t_xform[0] = tng_ws;
							w2t_xform[1] = cross(nrm_ws, tng_ws) * I_TNG_MS.w;
							w2t_xform[2] = nrm_ws;							
							
							float3 cam_dir_ws = pos_ws.xyz - CAMERA_POS_WS.xyz;
							X_CAM_DIR_TS = Mul33(cam_dir_ws, w2t_xform);							
						#endif
						
						V_POS_OUT_TC = Pos_Out_WS(pos_ws);                            
                        X_UV_0 = v_uv_0;
						
						#if defined(X_CLR)
							X_CLR = SwizzleXXXX(1.0);
							
							#if defined(VRT_CLR_ON)
								X_CLR *= I_CLR_VRT;
							#endif
							
							#if defined(D_USR_CLR_0_ON) || defined(D_USR_CLR_1_ON)
								#if defined(D_USR_CLR_1_ON)
									float4 usr_1 ;
									float4 usr_0 = Decode_Usr(I_CLR_USR, usr_1);	
									
									X_CLR *= usr_1;
									
									#if defined(D_USR_CLR_0_ON)
										X_CLR *= usr_0;
									#endif
								#else
									float4 usr_0 = Decode_Usr(I_CLR_USR);
									
									X_CLR *= usr_0;					
								#endif																			
							#endif	
						#endif																								
						
						#if defined(D_OCCLUSION_ON)
							X_OCCLUSION = I_CLR_VRT.w;
						#endif
                        
						#if defined(D_WIND_WEAVE_ON) 
						
							float3 v_pivot_pos_ws = float3(MODEL_XFORM_4x3[0].w, MODEL_XFORM_4x3[1].w, MODEL_XFORM_4x3[2].w);	
							float3 wind_pos_ws = pos_ws.xyz - v_pivot_pos_ws ;
							float2 wind_dir_space;
							wind_dir_space.x = dot(-wind_pos_ws.zx, v_pp_wind_2d_xform.xz);
							wind_dir_space.y = dot(-wind_pos_ws.zx, v_pp_wind_2d_xform.yx);
								
							float3 wind_direction_vec = normalize(  v_pp_wind_2d_xform.xxz * float3(1,0,-1));
							

							
							float delay_1 =  smoothstep(0,1,abs(frac(wind_pos_ws.y *1.0 +C_WIND_WEAVE_UV_SPEED * 0.15)-0.5)*2.0) ;
							float delay_2 =  smoothstep(0,1,abs(frac(wind_pos_ws.y + delay_1  )-0.5)*2.0)  * 0.3;
								
                            X_UV_SOL = wind_dir_space.yx * C_WIND_WEAVE_UV_SCALE + SwizzleXX(C_WIND_WEAVE_UV_SPEED) + SwizzleXX(delay_2);
							X_WEAVE_MSK =  saturate(dot( nrm_ws , normalize(wind_direction_vec))+ 1.0 ) *f_wind_power;
						#endif
                        
                    }
                }
            }

            PixelShader()
            {
                hlsl()
                {
					#if defined(SHADER_PATH_ORBIS) && defined(X_NRM_CS)
						// #pragma PSSL_target_output_format (target 1 FMT_UNORM16_ABGR)
					#endif

                    #include <master_new.hlsl>
					#include <colorops.hlsl>

                    void main()
                    {	
						#if defined(X_UV_0)
							FLOAT2 uv_0 = X_UV_0;							
						#endif
						#if defined(D_PARALLAX_ON) || defined(D_RELIEF_ON)
							FLOAT3 cam_dir_n_ts = normalize(X_CAM_DIR_TS);
                            cam_dir_n_ts *= C_PARALLAX_SCALE;


							#if defined(D_PARALLAX_ON)
                                FLOAT hgt = Sample_h2(S_HGT, X_UV_0, C_PARALLAX_MIP).g;
                                uv_0 += cam_dir_n_ts.xy * hgt;													
							#endif
							
							#if defined(D_RELIEF_ON)
                                FLOAT size = C_RELIEF_STEPS_INV;
						   
								FLOAT depth = 0.0;
						   
								for( int i=0;i<I_RELIEF_LINEAR_STEPS;i++ ) {
									float t = Sample_h2(S_HGT,uv_0 + cam_dir_n_ts.xy * depth, C_RELIEF_LINEAR_MIP).g;								
									if (depth<t)
										depth += size;
								}
														
								for( int i=0;i<I_RELIEF_BINARY_STEPS;i++ ) {
									size*=0.5;
									float t = Sample_h2(S_HGT,uv_0 + cam_dir_n_ts.xy * depth, C_RELIEF_BINARY_MIP).g;								
									if (depth<t)
										depth += (2.0*size);
									depth -= size;
								}
							
								uv_0 += cam_dir_n_ts * depth;
							#endif
						#endif
						#if defined(D_WIND_WEAVE_ON) 
							FLOAT nrm_weave_tex = Sample(S_WEAVE, X_UV_SOL).g;
							FLOAT weave_wind_msk = 1.0;
							#if defined(D_WIND_WEAVE_MSK) 
								weave_wind_msk = Sample(S_WEAVE_MSK, uv_0).g;
							#endif
							uv_0 +=((( SwizzleXX(nrm_weave_tex) * 2.0 - 1.0) * X_WEAVE_MSK ) * weave_wind_msk* 2.0 - 1.0)*C_WIND_WEAVE_DIST;
						#endif
                        O_SPC = Sample(S_CLR, uv_0);
						#if defined(D_ALPHA_SOURCE__RED)
							O_SPC.a = O_SPC.r;
						#elif defined(D_ALPHA_SOURCE__RED_INV)
							O_SPC.a = 1.0 - O_SPC.r;
						#elif defined(D_ALPHA_SOURCE__GREEN)
							O_SPC.a = O_SPC.g;
						#elif defined(D_ALPHA_SOURCE__GREEN_INV)
							O_SPC.a = 1.0 - O_SPC.g;
						#elif defined(D_ALPHA_SOURCE__BLUE)
							O_SPC.a = O_SPC.b;
						#elif defined(D_ALPHA_SOURCE__BLUE_INV)
							O_SPC.a = 1.0 - O_SPC.b;
						#elif defined(D_ALPHA_SOURCE__ALPHA_INV)
							O_SPC.a = 1.0 - O_SPC.a;
						#elif defined(D_ALPHA_SOURCE__LUM)
							O_SPC.a = saturate(Luminance(O_SPC.xyz));
						#elif defined(D_ALPHA_SOURCE__LUM_INV)
							O_SPC.a = saturate(1.0 - Luminance(O_SPC.xyz));
						#elif defined(D_ALPHA_SOURCE__ZERO)
							O_SPC.a = 0.0;
						#elif defined(D_ALPHA_SOURCE__ONE)
							O_SPC.a = 1.0;
						#endif

						#if defined(SHADER_PATH_DX1x) && defined(CLIP_ON)
							clip(-step(O_SPC.w, 0.0));
						#endif	

						#if defined(X_CLR)
							#if defined(D_RGB_MUL_ON)
								O_SPC.xyz = float3(1.0, 1.0, 1.0) - O_SPC.xyz;
							#endif
							#if defined(D_A_MUL_ON)
								O_SPC.w = 1.0 - O_SPC.w;
							#endif
						
							O_SPC *= X_CLR;

							#if defined(D_RGB_MUL_ON)
								O_SPC.xyz = float3(1.0, 1.0, 1.0) - O_SPC.xyz;
							#endif
							#if defined(D_A_MUL_ON)
								O_SPC.w = 1.0 - O_SPC.w;
							#endif
						#endif                        						
						
						#if defined(D_OCCLUSION_ON)
							O_SPC *= X_OCCLUSION;
						#endif	
						
                        #if defined(X_NRM_CS) 
                            float3 E2T_XFORM[3];
							E2T_XFORM[0] = X_TNG_CS;
							E2T_XFORM[1] = X_BNR_CS;
							E2T_XFORM[2] = X_NRM_CS;
							FLOAT3 nrm_ts = FLOAT3(0.0, 0.0, 1.0);
							nrm_ts.xy = Sample(S_NRM, uv_0).ag * 2.0 - 1.0;
                            nrm_ts.z = sqrt(1.0 - dot ( nrm_ts.xy , nrm_ts.xy ));							
                            nrm_ts.xy *= C_NRM_SCALE;
                            nrm_ts.z = sqrt(1.0 - dot ( nrm_ts.xy , nrm_ts.xy ));							
                            nrm_ts.z = sqrt(1.0 - dot ( nrm_ts.xy , nrm_ts.xy ));
							#if defined(D_WIND_WEAVE_ON)
								float3 nrm_w = SwizzleXXX(1.0);
								nrm_w.xy = SwizzleXX(nrm_weave_tex)*C_WIND_WEAVE_NRM_FACTOR;
								nrm_ts.xy += nrm_w.xy * weave_wind_msk * X_WEAVE_MSK;
							#endif													
							FLOAT3 nrm_cs = Mul33T(nrm_ts, E2T_XFORM);							                              
                       
                            O_NRM.xyz = nrm_cs * 0.5 + 0.5;
                            O_NRM.w = O_SPC.w * C_ALPHA_1_FACTOR;
                        #endif  	

                        O_SPC.w *= C_ALPHA_0_FACTOR;
						O_DIF = O_SPC;
						// O_SPC.xyz = SwizzleXXX(Luminance(O_SPC.xyz) * 0.5);
					}
                }
            }                
        } 
    }
}
