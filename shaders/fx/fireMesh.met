//new

using engineflags;
using settemplates;
using tmu;

template
{   
	category Main
	{
		string_dat s_base_tex = s_tex_def;
		string_dat s_noise_tex = "fire_wave.dds";
		float_dat f_speed = 0.5;
		float_dat f_waves = 1.0;
		float_dat f_intensity = 4.0;
		float_dat f_depth_fade = 10.0;
		float_dat f_angle_fade = 0.25;
		bool_dat b_rotate = TRUE;
		bool_dat b_stretch = FALSE;
		bool_dat b_inversed_cull = FALSE;
	}
	
    templatebody()
    {
		tech(s_tech_trn)
        {

			if(b_inversed_cull)
			{
			  Cull(CCW);
			}
			else
			{
			  Cull(CW);
			}	
			
			BlendFunc(ONE, SRC_ALPHA, ZERO, ONE);
			DepthFunc(LEQUAL, FALSE);
			
			Input I_POS_MS = new InputFloat4("POSITION");
			Input I_UV_0 = new InputFloat2("TEXCOORD0");
			Input I_NRM_MS = new InputFloat3("NORMAL");
			Input I_CLR_0 = new InputFloat4("COLOR0");
			
			Output O_CLR = new OutputFLOAT4("COLOR0");

			X_UV_0 = SetTexcoord2();			
			X_UV_1 = SetTexcoord2();			
			X_UV_2 = SetTexcoord2();
			X_CLR_0 = SetTexcoord4();
			X_DEPTH = SetTexcoord();

			S_CLR = SetTexture(s_base_tex, e_tex_filter_def, If(b_rotate, WRAP, MIRROR), If(b_rotate, WRAP, MIRROR), true);
			S_NOISE = SetTexture(s_noise_tex);
			
			extern float_dat f_pp_hdr_intensity_emissive;
            extern float_dat TIME;	

			float_dat f_speed5 = If(b_rotate, f_speed * 5.0, f_speed);
			float_dat f_angle_1 = f_speed * f_speed * TIME;
            float_dat f_sin_1 = sin(f_angle_1);
            float_dat f_cos_1 = cos(f_angle_1);

			float_dat f_angle_2 = -1.5 * f_speed * TIME;
            float_dat f_sin_2 = sin(f_angle_2);
            float_dat f_cos_2 = cos(f_angle_2);			
			
			C_SPEED = SetConst(f_speed);
			C_SPEED_2 = SetConst(1.5 * f_speed);
			C_INTENSITY = SetConst(f_pp_hdr_intensity_emissive * f_intensity);
			C_WAVES = SetConst(50.0 * f_waves);
			
			C_BLENDING_DEPTH = SetConst(If(f_depth_fade != 0.0, 1.0 / f_depth_fade, 10000.0));
			C_ANGLE_FADE = SetConst(f_angle_fade);
			C_SIN_MUL = SetConst(f_speed5, f_speed5 * 5.0, f_speed5);
			
			C_SINVAL_1 = SetConst(f_sin_1);
			C_COSVAL_1 = SetConst(f_cos_1);
			C_SIN_ADD = SetConst(f_speed5 * TIME, f_speed5 * 5.0 * TIME, f_speed5 * TIME);
			C_SINVAL_2 = SetConst(f_sin_2);
			C_COSVAL_2 = SetConst(f_cos_2);
			C_TIME_1 = SetConst(If(f_speed != 0.0, TIME / f_speed, 10000.0));
			C_TIME_2 = SetConst(If(f_speed != 0.0, TIME / (1.5 * f_speed), 10000.0));
			
			if(f_angle_fade > 0.0)
			{
				Define("ANGLE_FADE_ON", 1);
			}
			
			if(b_rotate)
			{
			  Define("ROTATE_ON", 1);
			}

			if(b_stretch)
			{
			  Define("STRETCH_ON", 1);
			}
			
			use PP_DEPTH_TMU();
			
			VertexShader()
			{
				hlsl(s_hlsl_profile_def)
				{
					
					#include <master_new.hlsl>

					void main()
					{
						float4 pos_ms = Decode_Pos(I_POS_MS);
						float4 pos_ws = Mul_Pos(pos_ms, MODEL_XFORM_4x3);

						X_DEPTH = dot(pos_ws, VIEWPROJ_XFORM[3]) * C_BLENDING_DEPTH;

						X_UV_0 =  Decode_UV(I_UV_0);

						float speed = C_SPEED;

						#if !defined(ROTATE_ON)						
							speed *= 5.0; 
						#endif

						float3 sin_txyz = sin( pos_ms.xzz * pos_ms.yxy * C_SIN_MUL + C_SIN_ADD );
						float3 v_waves = (1.0 - X_UV_0.yyy) * C_WAVES * sin_txyz;
						// strech


						#if defined(STRETCH_ON)
							float3 dir = (CONST_0.rgb * 2.0) - 1.0;
							dir *= 30.0 * I_CLR_0.a;
							dir *= (1.0 - X_UV_0.y);
							pos_ws.xyz += dir.xyz;
						#endif 

						// waves
						pos_ws.xyz += v_waves.xyz;

						X_CLR_0.rgb = CONST_0.aaa;
						X_CLR_0.a = 1.0;
						X_CLR_0 *=  3.0 * I_CLR_0 * C_INTENSITY;
											   
						V_POS_OUT_TC = Mul44(pos_ws, VIEWPROJ_XFORM);

						X_UV_1 = X_UV_0;
						X_UV_2 = X_UV_0;

						#if defined(ROTATE_ON)

							X_UV_2.x -= 0.5;
							X_UV_2.y -= 0.5;

							X_UV_1.x -= 0.5;
							X_UV_1.y -= 0.5;

												  
							float sinVal_0 = C_SINVAL_1;
							float cosVal_0 = C_COSVAL_1;

							float x_1 = X_UV_1.x;
							float y_1 = X_UV_1.y;

							X_UV_1.x = (x_1 * cosVal_0 - y_1 * sinVal_0) + 0.5;
							X_UV_1.y = (y_1 * cosVal_0 + x_1 * sinVal_0) + 0.5;
												 
							float sinVal_1 = C_SINVAL_2;
							float cosVal_1 = C_COSVAL_2;

							float x_2 = X_UV_2.x;
							float y_2 = X_UV_2.y;

							X_UV_2.x = (x_2 * cosVal_1 - y_2 * sinVal_1) + 0.5;
							X_UV_2.y = (y_2 * cosVal_1 + x_2 * sinVal_1) + 0.5;

						#else

							X_UV_1.y *= 2.0;
							X_UV_1.x = 1.0 - X_UV_1.x;
							X_UV_2.y *= 2.0;

							X_UV_1.y += C_TIME_1;
							X_UV_2.y += C_TIME_2;
						  
						#endif

						#if defined(ANGLE_FADE_ON)
							float3 norm = Mul33(I_NRM_MS, MODEL_XFORM_4x3);
							float3 v_cam_dir_ws = CAMERA_POS_WS.xyz - pos_ws.xyz;
							float3 to_cam_ws = -(normalize(v_cam_dir_ws));
							float dt = saturate(abs(dot(norm.xyz, to_cam_ws.xyz)) - 0.1);
							X_CLR_0.rgba *= saturate(dt * dt - C_ANGLE_FADE);
						#endif												
					}
				}

			}

			PixelShader()
			{
				hlsl(s_hlsl_profile_def)
				{
					
					#include <master_new.hlsl>
					#include <depth_sample.hlsl>

					void main()
					{
						FLOAT4 v_clr_0 = Sample_h4( S_CLR, X_UV_1 );
						FLOAT4 v_clr_1 = Sample_h4( S_CLR, X_UV_2 );

						float4 waves = 0.5 * (v_clr_0 + v_clr_1);
						
						float offset = (0.6 * (waves.g + waves.r) - 0.3) * waves.a * saturate(1.0 - X_UV_0.y);
						FLOAT4 v_clr_2 = Sample_h4( S_CLR, X_UV_0 + offset);

						float alpha = v_clr_2.a * saturate(X_UV_0.y);
						alpha *= alpha;

						O_CLR.rgb = waves.rgb * waves.rgb * X_CLR_0.rgb * alpha;
						O_CLR.rgb *= 11.0 - 10.0 * X_UV_0.y;

						float2 v_uv = UV_Screen(V_POS_SS_TC); 
						float f_depth = Depth_Sample(v_uv);

						float f_diff = saturate( f_depth * C_BLENDING_DEPTH - X_DEPTH );			                      
						f_diff *= f_diff * f_diff;

						O_CLR.rgb *= f_diff;
						O_CLR.a = 1.0;
					}
				}
			}
        }
    }
}

  
