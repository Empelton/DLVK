//new

using engineflags;
using settemplates;

template
{
	category Main
	{
		string_dat s_nrm = "water_rings_n.dds" : editor(ImageFileNameEditor), display(Normal map);
		float_dat nrm_scale = 1.0 : converter(min = 0.0, max = 1.0), display(Normal scale);
		bool_dat fx_material_on = TRUE : display(Material for FX);
	}

    templatebody()
    {
		platform("ps4;one;dx11;ogl", "none; instancing");
		
		tech("nrm")
        {
			Cull(NONE);
            DepthFunc(LEQUAL, FALSE);
            BlendFunc(SRC_ALPHA, INV_SRC_ALPHA, ONE, ONE);
			ColorFunc(TRUE, TRUE, FALSE, FALSE);

			Input I_POS_MS = new InputFloat4("POSITION");
			Input I_UV_0 = new InputFloat2("TEXCOORD0");

			Output O_CLR = new OutputFLOAT4("COLOR0");

			X_UV_0 = SetTexcoord2();
			X_SCALE = SetTexcoord();
			X_BIAS = SetTexcoord();

			S_NRM = SetTexture(s_nrm, LINEAR_MIP_POINT, CLAMP, CLAMP, FALSE);

			C_SCALE = SetConst(nrm_scale);

			if(fx_material_on)
			{
				Define("D_FX_MATERIAL_ON", 1);
				Input I_CLR_0 = new InputFloat4("COLOR0");
			}
			else
			{
				Input I_USR = new InputFloat4("COLOR_USER");
				Input I_TNG_MS = new InputFloat4("TANGENT0");
				Input I_NRM_MS = new InputFloat3("NORMAL0");
				X_TNG_WS = SetTexcoord3();
				X_NRM_WS = SetTexcoord3();
				X_BNR_WS = SetTexcoord3();
			}

			VertexShader()
			{
				hlsl()
				{
					#include <master_new.hlsl>

					void main()
					{
						#if defined(D_FX_MATERIAL_ON)
							float opacity = I_CLR_0.w;
						#else
							I_POS_MS = Decode_Pos(I_POS_MS);
							I_UV_0 = Decode_UV(I_UV_0);
							float4 usr_0 = Decode_Usr(I_USR);
							float opacity = usr_0.w;

							float3 nrm_ws = Mul33(I_NRM_MS, MODEL_XFORM_4x3);
							X_NRM_WS = normalize(nrm_ws);
							float3 tng_ws = Mul33(I_TNG_MS.xyz, MODEL_XFORM_4x3);
							X_TNG_WS = normalize(tng_ws);
							X_BNR_WS = cross(X_NRM_WS, X_TNG_WS) * I_TNG_MS.w;
						#endif

						opacity *= C_SCALE;

						X_SCALE = opacity * 2.0;
						X_BIAS = -opacity;

						float4 pos_ws = Mul_Pos(I_POS_MS, MODEL_XFORM_4x3);
						V_POS_OUT_TC = Pos_Out_WS(pos_ws);

						X_UV_0 = I_UV_0;
					}
				}
			}

			PixelShader()
			{
				hlsl()
				{
					#include <master_new.hlsl>

					void main()
					{
						float3 nrm_ts;
						nrm_ts.xy = Sample(S_NRM, X_UV_0).ag * SwizzleXX(X_SCALE) + SwizzleXX(X_BIAS);
						nrm_ts.z = 1.0;

						#if defined(D_FX_MATERIAL_ON)
							float3 nrm_ws = nrm_ts.xzy;
						#else
							float3 W2T_XFORM[3];
							W2T_XFORM[0] = X_TNG_WS;
							W2T_XFORM[1] = X_BNR_WS;
							W2T_XFORM[2] = X_NRM_WS;

							float3 nrm_ws = Mul33T(nrm_ts, W2T_XFORM);;
						#endif

						float3 nrm_n_ws = normalize(nrm_ws);

						O_CLR.xy = nrm_n_ws.xz * SwizzleXX(0.5) + SwizzleXX(0.5);
						O_CLR.z = 0.0;
						O_CLR.w = max(abs(nrm_n_ws.x), abs(nrm_n_ws.z));
					}
				}
			}
        }
    }
}
