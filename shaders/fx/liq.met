//new

using engineflags;
using settemplates;
using tmu;

template
{   
	category Main
	{
		string_dat s_liquid_masks = "liq_blood.dds";
		float_dat f_depth_blending = 1.0;
		bool_dat b_depth_filtered_on = FALSE;
		bool_dat b_type_0 = FALSE;
		bool_dat b_type_1 = FALSE;
		bool_dat b_type_2 = FALSE;
	}
	
    templatebody()
    {
		tech("liq")
        {
					
			Cull(NONE);
			DepthFunc(ALWAYS, FALSE);
			BlendFunc(ONE, ONE, ONE, ONE);
			BlendOp(MAX);
			ColorFunc(b_type_0, b_type_1, b_type_2, FALSE);
			
			Input I_POS_MS = new InputFloat4("POSITION");
			Input I_UV_0 = new InputFloat2("TEXCOORD0");
			Input I_CLR_0 = new InputFloat4("COLOR0");
			
			Output O_CLR = new OutputFLOAT4("COLOR0");

			X_UV_0 = SetTexcoord2();			
			X_CLR_0 = SetTexcoord4();
			X_DEPTH_BLENDING_SCALE = SetTexcoord();
			
			if(b_depth_filtered_on) { Define("DEPTH_FILTERED_ON", 1); }
			
			C_DEPTH_BLENDING_SCALE = SetConst(1.0/f_depth_blending);
			
			use PP_DEPTH4_TMU();
						
			S_CLR = SetTexture(s_liquid_masks, LINEAR_MIP_POINT, CLAMP, CLAMP, false);
						
			VertexShader()
			{
				hlsl(s_hlsl_profile_def)
				{
					
					#include <master_new.hlsl>
					#include <fog.hlsl>
					#include <colorops.hlsl>
					
					void main()
					{
						V_POS_OUT_TC = Pos_Out(I_POS_MS);
						X_UV_0 = I_UV_0;						
						X_DEPTH_BLENDING_SCALE = V_POS_OUT_TC.w * C_DEPTH_BLENDING_SCALE;
						
						X_CLR_0.x = I_CLR_0.x * I_CLR_0.y;
						X_CLR_0.y = (1.0 - I_CLR_0.x) * I_CLR_0.y;
						X_CLR_0.z = I_CLR_0.z * (1.0 - I_CLR_0.y);
						X_CLR_0.w = (1.0 - I_CLR_0.z) * (1.0 - I_CLR_0.y);
						X_CLR_0 *= I_CLR_0.w;
						
						float3 ext = Scattering_Ext(V_POS_OUT_TC.w);
						float ext_opacity = Luminance(ext);
						X_CLR_0 *= ext_opacity;	
					}
				}

			}

			PixelShader()
			{
				hlsl(s_hlsl_profile_def)
				{
					
					#include <master_new.hlsl>
					#include <depth_sample.hlsl>

					#if defined(DEPTH_FILTERED_ON)
						CONST_FLOAT4 TEX_INV_SIZE_s_dpt_4;
					#endif	
					
					void main()
					{
					    FLOAT2 v_uv = UV_Screen(V_POS_SS_TC);

						#if defined(DEPTH_FILTERED_ON)
							FLOAT3 v_uv_h = v_uv.xyx + TEX_INV_SIZE_s_dpt_4.xyx * FLOAT3(-1.0, 0.0, 1.0);
							FLOAT3 v_uv_v = v_uv.xyy + TEX_INV_SIZE_s_dpt_4.xyy * FLOAT3(0.0, -1.0, 1.0);

							FLOAT4 v_depths;
							v_depths.x = Depth4_Max_Sample(v_uv_h.xy);
							v_depths.y = Depth4_Max_Sample(v_uv_h.zy);
							v_depths.z = Depth4_Max_Sample(v_uv_v.xy);
							v_depths.w = Depth4_Max_Sample(v_uv_v.xz);

							FLOAT f_depth = dot(v_depths, SwizzleXXXX(0.25));
						#else
							FLOAT f_depth = Depth4_Max_Sample(v_uv);
						#endif
						
						FLOAT f_depth_opacity = saturate(f_depth * C_DEPTH_BLENDING_SCALE - X_DEPTH_BLENDING_SCALE);
						
						FLOAT4 v_clr = Sample(S_CLR, X_UV_0);

						O_CLR = SwizzleXXXX(dot(v_clr, X_CLR_0)) * f_depth_opacity;
					}
				}
			}
        }
    }
}

  
