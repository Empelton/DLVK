//new

using engineflags;
using settemplates;
using tmu;

template
{   
	category Main
	{
		float_dat f_speed = 1.0;
		float_dat f_angle = 1.0;
	}
	
    templatebody()
    {
		tech(s_tech_std)
        {
					
			Cull(NONE);
			DepthFunc(ALWAYS, FALSE);
			
			Input I_POS_MS = new InputFloat4("POSITION");
			Input I_UV_0 = new InputFloat2("TEXCOORD0");

			Output O_CLR = new OutputFLOAT4("COLOR0");

			X_UV_0 = SetTexcoord2();			

			extern float_dat TIME;
            extern float_dat FPS;	
			
			C_HIT_DIR = SetConst(sin(f_angle),cos(f_angle));
			C_DT = SetConst(1.0/FPS);
			C_ANGLE = SetConst(f_angle);
			
			VertexShader()
			{
				hlsl()
				{
					
					#include <master_new.hlsl>

					void main()
					{
						V_POS_OUT_TC = Decode_Pos(I_POS_MS);
						
						float2 v_uv_0 = Decode_UV(I_UV_0);
						X_UV_0 = v_uv_0;												
					}
				}

			}

			PixelShader()
			{
				hlsl()
				{
					
					#include <master_new.hlsl>
					#include <colorops.hlsl>

					void main()
					{
						float2 v_uv_dir = X_UV_0 - 0.5;
						float  f_uv_dir_len = length(v_uv_dir);
						float2 v_uv_dir_n = v_uv_dir / (f_uv_dir_len +0.001);
						float3 v_clr = SwizzleXXX( saturate(dot(v_uv_dir_n, C_HIT_DIR)) );
						v_clr = pow(v_clr, float3(4.0, 4.0, 4.0));
						v_clr = lerp(float3(0.0, 0.0, 0.0), v_clr* float3(1,0,0), f_uv_dir_len * 2);
						
						float f_clr_lum = Luminance(v_clr);						
						
						O_CLR = float4(v_clr, 1);
					}
				}
			}
        }
    }
}

  
