//new

using engineflags;
using settemplates;
using tmu;

template
{   
	category Main
	{
		string_dat s_tex = "vehicle_lens_flare.dds";
		float_dat f_intensity = 1.0;
		float_dat f_camera_offset = 150.0;
	}
	
    templatebody()
    {
		tech("trn2")
        {
					
			Cull(NONE);
			DepthFunc(ALWAYS, FALSE);                
			BlendFunc(ONE, ONE, ONE, ONE);
			
			use SetRegcount(i_regcount = 24;);
			
			Input I_POS_MS = new InputFloat4("POSITION");
			Input I_UV_0 = new InputFloat2("TEXCOORD0");
			Input I_CLR_USR = new InputFloat4("COLOR_USER");
			
			Output O_CLR = new OutputFLOAT4("COLOR0");

			X_UV_0 = SetTexcoord2();			
			X_UV_CENTER = SetTexcoord2();
			X_DPT_CENTER = SetTexcoord();
			X_CLR_USR = SetTexcoord4();
			
			extern vec4_dat v_pp_hdr_intensity_max;
            extern float_dat f_pp_hdr_intensity_fx_add;
			extern vec3_dat CAMERA_DIR_WS;    
            f_intensity = f_intensity * f_pp_hdr_intensity_fx_add;
			mtx_dat m_uv_xfm = invert(orient(CAMERA_DIR_WS, vec(0.0, 0.0, 0.0)));
			
			C_GLOW_INTENSITY = SetConst(f_intensity * v_pp_hdr_intensity_max.x, f_intensity * v_pp_hdr_intensity_max.y, f_intensity * v_pp_hdr_intensity_max.z);
			C_CAMERA_OFFSET = SetConst(f_camera_offset);
			C_UV_XFM = SetConst(m_uv_xfm);
			
			S_DPT_2 = SetTexture(16, NO_FILTERING, CLAMP, CLAMP, false);
			S_TEX = SetTexture(s_tex, LINEAR_MIP_LINEAR, CLAMP, CLAMP, true);	
			
			VertexShader()
			{
				use Instancing();
				hlsl(s_hlsl_profile_def)
				{
					
					#include <master_new.hlsl>

					void main()
					{
						float4 v_pos_center;   
						v_pos_center.x = MODEL_XFORM_4x3[0].w;
						v_pos_center.y = MODEL_XFORM_4x3[1].w;
						v_pos_center.z = MODEL_XFORM_4x3[2].w;
						v_pos_center.w = 1.0;
						
						I_POS_MS = Decode_Pos(I_POS_MS);
						I_POS_MS.xyz = Mul33(I_POS_MS.xzy, C_UV_XFM); 
						
						float f_scale_factor = 1.0;
						f_scale_factor += saturate(length(CAMERA_POS_WS.xyz - v_pos_center.xyz) / 1000.0 - 0.2);
						float4 v_pos_ws = I_POS_MS * f_scale_factor + v_pos_center;
						v_pos_ws.w = 1.0;
						
						float3 v_offset_dir = CAMERA_POS_WS.xyz - v_pos_ws.xyz;
						v_pos_ws.xyz += normalize(v_offset_dir) * C_CAMERA_OFFSET;
						
						X_CLR_USR = I_CLR_USR; 
						V_POS_OUT_TC = Pos_Out_WS(v_pos_ws);
						X_UV_0 = Decode_UV(I_UV_0).xy;        
						
						X_DPT_CENTER = dot(v_pos_center, VIEWPROJ_XFORM[3]);
						v_pos_center = Mul44(v_pos_center, VIEWPROJ_XFORM);
						X_UV_CENTER = float2(v_pos_center.x, -v_pos_center.y) / v_pos_center.w;										
					}
				}

			}

			PixelShader()
			{
				hlsl(s_hlsl_profile_def)
				{
					
					#include <master_new.hlsl>

					void main()
					{
						FLOAT2 v_uv = X_UV_0.xy;    
						FLOAT2 v_uv_screen = X_UV_CENTER * 0.5 + 0.5;    
						float f_depth = Sample_h4(S_DPT_2, v_uv_screen).z;
						
						FLOAT4 v_clr = Sample(S_TEX, v_uv);
						
						FLOAT4 v_out = v_clr * X_CLR_USR;
						v_out.w = saturate(dot(C_GLOW_INTENSITY, v_out.xyz));	
						
						v_out *= saturate(f_depth - X_DPT_CENTER);
						
						O_CLR = v_out;
					}
				}
			}
        }
    }
}

  
