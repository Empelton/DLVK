//new

using engineflags;
using settemplates;
using tmu;

template
{
	public static int_dat e_blend_lerp = 0;
	public static int_dat e_blend_add = 1;

	category Main
	{
		string_dat s_clr = s_tex_def;
		int_dat e_blend = e_blend_lerp;
	}

    templatebody()
    {
		platform("*", "none; instancing");

		tech(If(e_blend == e_blend_lerp,s_tech_opq_clr,s_tech_trn))
        {
			Cull(CW);
            DepthFunc(LEQUAL, FALSE);
            ColorFunc(TRUE, TRUE, TRUE, FALSE);

			if(e_blend == e_blend_lerp)
			{
				BlendFunc(SRC_ALPHA, INV_SRC_ALPHA, ZERO, INV_SRC_ALPHA);
				BlendFunc(SRC_ALPHA, INV_SRC_ALPHA, ZERO, INV_SRC_ALPHA, 1);
				ColorFunc(TRUE, TRUE, TRUE, FALSE, 1);
				Define("BLEND", 1);
				Output O_DIF = new OutputFLOAT4("COLOR1");
			}
			else
			{
				BlendFunc(ONE, ONE, ONE, ONE);
			}

			Input I_POS_MS = new InputFloat4("POSITION");
			Input I_UV_0 = new InputFloat2("TEXCOORD0");
			Input I_CLR_0 = new InputFloat4("COLOR0");

			Output O_SPC = new OutputFLOAT4("COLOR0");

			X_UV_0 = SetTexcoord2();
			X_CLR_VRT = SetTexcoord4();


			extern float_dat f_pp_hdr_intensity_emissive;
			C_PP_HDR_INTENSITY_EMISSIVE = SetConst(f_pp_hdr_intensity_emissive);

			S_CLR = SetTexture(s_clr, e_tex_filter_def, CLAMP, CLAMP, false);

			VertexShader()
			{
				hlsl()
				{
					#include <master_new.hlsl>

					void main()
					{
						V_POS_OUT_TC = Pos_Out_WS(I_POS_MS);
						X_UV_0 = I_UV_0;


						X_CLR_VRT = I_CLR_0;
						#if !defined(BLEND)
							X_CLR_VRT.xyz = X_CLR_VRT.xyz * C_PP_HDR_INTENSITY_EMISSIVE;
						#endif
					}
				}
			}

			PixelShader()
			{
				hlsl()
				{
					#include <master_new.hlsl>
					#include <colorops.hlsl>
					#include <gamma.hlsl>

					void main()
					{
						FLOAT4 v_clr_out = Sample(S_CLR, X_UV_0);
						v_clr_out *= X_CLR_VRT;

						#if defined(BLEND)
						  clip(v_clr_out.w);
						#else
						  v_clr_out.rgb *= v_clr_out.w;
						#endif

						O_SPC = v_clr_out;

						#if defined(BLEND)
							O_DIF = O_SPC;
							O_SPC.xyz = SwizzleXXX( Linear2Gamma(Luminance(O_SPC.xyz) * 0.5) );
						#endif
					}
				}
			}
        }
    }
}


