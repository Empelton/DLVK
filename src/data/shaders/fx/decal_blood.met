//new
using settemplates;
using engineflags;

template
{
	public string TemplateCategory() { return "Decals"; }

    category Basic
    {
		class Main
		{
			string_dat s_msk = "" : editor(ImageFileNameEditor), display(Blood mask - DXT1.g);
			string_dat s_nrm = "" : editor(ImageFileNameEditor), display(Normal);
			string_dat s_grd = "blood_a_grd.dds" : editor(ImageFileNameEditor), display(Gradient map);
		}
		class Self illumination
		{
			bool_dat ems_on = FALSE : display(Selfillumination enabled);
		}
    }
	category Advanced
	{
		class Factors
		{
			float_dat nrm_factor = 1.0 : display(Normal scale);
			float_dat clr_alpha = 1.0 : display(Color alpha blending factor);
			float_dat nrm_alpha = 1.0 : display(Normal alpha blending factor);
		}
		class Gradient
		{
			float_dat grd_tex_size = 32.0 : display(Gradient texture size);
			bool_dat grd_adv_on = FALSE : display(Advanced gradient controls enabled);
			bool_dat grd_scale_src_on = FALSE : display(Gradient range limits affects alpha);
		}
		class Decals
		{
			bool_dat decal_on = FALSE : display(Material for decal system);
			bool_dat decal_nrm_on = FALSE : display(Decal normal enabled);
		}
		class FX
		{
			bool_dat fx_flow_on = FALSE : display(FX flow control enabled);
		}
	}

    templatebody()
    {
		bool_dat nrm_on = ((s_nrm != "") | (decal_nrm_on & decal_on)) & !ems_on;
		string_dat technique = If( nrm_on, "opq_clr_nrm", "opq_clr");
		technique = If(ems_on, "ems", technique);

        tech(technique)
        {
            Cull(CW);
			S_GRD = SetTexture(s_grd, LINEAR_NO_MIP, CLAMP, CLAMP, ems_on);
			Output O_SPC = new OutputFLOAT4("COLOR0");
			if(ems_on)
			{
				Define("EMS_ON", 1);
				BlendFunc(SRC_ALPHA, ONE, ZERO, ONE, 0);
				extern float_dat f_pp_hdr_intensity_emissive;
				C_EMISSIVE_INTENSITY = SetConst(f_pp_hdr_intensity_emissive);
			}
			else
			{
				Output O_DIF = new OutputFLOAT4("COLOR1");
				BlendFunc(SRC_ALPHA, INV_SRC_ALPHA, ZERO, INV_SRC_ALPHA, 0);
				BlendFunc(SRC_ALPHA, INV_SRC_ALPHA, ZERO, INV_SRC_ALPHA, 1);
			}
			if(nrm_on)
			{
				BlendFunc(SRC_ALPHA, INV_SRC_ALPHA, ZERO, INV_SRC_ALPHA, 2);
				ColorFunc(TRUE, TRUE, TRUE, FALSE, 2);
				Input I_TNG_MS = new InputFloat4("TANGENT");
				Input I_NRM_MS = new InputFloat3("NORMAL0");

                X_NRM_CS = SetTexcoord3();
                X_TNG_CS = SetTexcoord3();
                X_BNR_CS = SetTexcoord3();

				Output O_NRM = new OutputFLOAT4("COLOR2");
				C_NRM_SCALE__ALPHA = SetConst(vec(clamp(nrm_factor), -clamp(nrm_factor), nrm_alpha));
			}
			C_CLR_ALPHA = SetConst(clr_alpha);
            DepthFunc(LEQUAL, FALSE);
            AlphaFunc(GREATER, 0.0);

            Input I_POS_0 = new InputFloat4("POSITION");
            Input I_UV_0 = new InputFloat2("TEXCOORD0");

			X_UV_0 = SetTexcoord2();
			SetFixedUV(X_UV_0);


			float_dat grd_tex_inv_size = 1.0 / grd_tex_size;
			float_dat grd_uv_u_scale = (grd_tex_size - 1.0) * grd_tex_inv_size;
			float_dat grd_uv_u_bias = 0.5 * grd_tex_inv_size;
			//float_dat grd_uv_v_bias = If(ems_on, grd_tex_inv_size * 1.5, grd_tex_inv_size * 0.5);
			float_dat grd_uv_v_bias = If(ems_on, 1.0, 0.0);
			if(grd_adv_on)
			{
				X_GRD_UV_FACTORS = SetTexcoord4();
				C_GRD_UV_U_SCALE = SetConst(grd_uv_u_scale);
				C_GRD_UV_U_BIAS = SetConst(grd_uv_u_bias);
				C_GRD_UV_V_SCALE = SetConst(510.0 * grd_tex_inv_size); //2.0 * 255.0
				C_GRD_UV_V_BIAS = SetConst(0.5 * grd_tex_inv_size);
				C_GRD_UV_V_SHIFT_SCALE = SetConst(grd_tex_inv_size * grd_uv_u_scale); //shift scaled frome <0.0-32.0> to <0.5 - 31.5> ranger
				if(grd_scale_src_on)
				{
					X_GRD_ALPHA_FACTORS = SetTexcoord2();
				}
			}
			else
			{
                C_GRD_UV_FACTORS = SetConst(vec(grd_uv_u_scale, 0.0, grd_uv_u_bias, grd_uv_v_bias));
			}

			if(decal_on)
			{
				Define("D_DECAL_ON", 1);
				S_MSK = SetTexture(0, ANISOTROPIC_MIP_POINT, CLAMP, CLAMP, FALSE);
				if(grd_adv_on)
				{
					Input I_CLR_USR = new InputFloat4("COLOR0");
				}
				if(nrm_on)
				{
					S_NRM = SetTexture(1, LINEAR_MIP_LINEAR, CLAMP, CLAMP, FALSE);
				}
			}
			else
            {
                S_MSK = SetTexture(s_msk, ANISOTROPIC_MIP_POINT, CLAMP, CLAMP, FALSE);
				if(grd_adv_on)
				{
					Input I_CLR_USR = new InputFloat4("COLOR_USER");
				}
				if(nrm_on)
				{
					S_NRM = SetTexture(s_nrm, LINEAR_MIP_LINEAR, CLAMP, CLAMP, FALSE);
				}
            }
			if(fx_flow_on)
			{
				Input I_CLR_0 = new InputFloat4("COLOR0");
				X_THRESHOLD = SetTexcoord();
				X_OPACITY = SetTexcoord();
			}

            VertexShader()
            {
                use Instancing();

                hlsl()
                {
                    #include <master_new.hlsl>

                    void main()
                    {
						float4 pos_ms = Decode_Pos(I_POS_0);

						float4 pos_ws = Mul_Pos(pos_ms, MODEL_XFORM_4x3);

						V_POS_OUT_TC = Pos_Out_WS(pos_ws);

						X_UV_0 = Decode_UV(I_UV_0);

						#if defined(X_GRD_UV_FACTORS)
							float4 clr_usr = I_CLR_USR;
							#if !defined(D_DECAL_ON)
								clr_usr = Decode_Usr(I_CLR_USR);
							#endif

							float grd_uv_u_scale = 1.0 / (clr_usr.y - clr_usr.x);
							float grd_uv_u_bias = -clr_usr.x * grd_uv_u_scale;
							#if defined(X_GRD_ALPHA_FACTORS)
								X_GRD_ALPHA_FACTORS = float2(grd_uv_u_scale, grd_uv_u_bias);
							#endif
                            float grd_uv_v_shift = clr_usr.w * C_GRD_UV_V_SHIFT_SCALE + C_GRD_UV_V_BIAS;
							X_GRD_UV_FACTORS = float4(
                                C_GRD_UV_U_SCALE * grd_uv_u_scale,
								0.0,
                                grd_uv_u_bias * C_GRD_UV_U_SCALE + C_GRD_UV_U_BIAS,
                                clr_usr.z * C_GRD_UV_V_SCALE + grd_uv_v_shift
								);
						#endif

						#if defined(X_NRM_CS)
							float3 nrm_ws = I_NRM_MS.xyz;
							float3 tng_ws = I_TNG_MS.xyz;
							#if !defined(D_DECAL_ON)
								nrm_ws = Mul33(I_NRM_MS.xyz, MODEL_XFORM_4x3);
								tng_ws = Mul33(I_TNG_MS.xyz, MODEL_XFORM_4x3);
							#endif
							X_NRM_CS = normalize(Mul33(nrm_ws, VIEW_XFORM));

							float3 tng_cs = Mul33(tng_ws, VIEW_XFORM);
							float3 tng_n_cs = normalize(tng_cs);
							X_TNG_CS = tng_n_cs;

							float3 bnr_n_cs = cross(X_NRM_CS, X_TNG_CS);
							bnr_n_cs *= I_TNG_MS.w;
							X_BNR_CS = bnr_n_cs;
						#endif
								
						#if defined(X_THRESHOLD)
							X_THRESHOLD = (256.0/255.0) - I_CLR_0.z;
						#endif

						#if defined(X_OPACITY)
							X_OPACITY = I_CLR_0.w;
						#endif
                    }
                }
            }

            PixelShader()
            {
                hlsl()
                {
					#if defined(SHADER_PATH_ORBIS) && defined(S_NRM)
						// #pragma PSSL_target_output_format (target 1 FMT_UNORM16_ABGR)
					#endif					
				
                    #include <master_new.hlsl>

                    void main()
                    {
						FLOAT msk = Sample_h2(S_MSK, X_UV_0).g;
						#if defined(X_THRESHOLD)
							clip(msk - X_THRESHOLD);
						#endif
						#if defined(X_OPACITY)
							msk *= X_OPACITY;
						#endif
						FLOAT2 grd_uv = SwizzleXX(msk);

						#if defined(X_GRD_UV_FACTORS)
							grd_uv = grd_uv * X_GRD_UV_FACTORS.xy + X_GRD_UV_FACTORS.zw;
						#else
                            grd_uv = grd_uv * C_GRD_UV_FACTORS.xy + C_GRD_UV_FACTORS.zw;
						#endif

						O_SPC = Sample(S_GRD, grd_uv);
						#if defined(EMS_ON)
							O_SPC.xyz *= C_EMISSIVE_INTENSITY;
						#endif

						#if defined(X_GRD_ALPHA_FACTORS)
							O_SPC.w = saturate(O_SPC.w * X_GRD_ALPHA_FACTORS.x + X_GRD_ALPHA_FACTORS.y);
						#endif
						
						O_SPC.w *= C_CLR_ALPHA;
						#if !defined(EMS_ON)
							O_DIF = O_SPC;
							O_SPC.xyz = (O_DIF.xxx);
						#endif
						
						#if defined(S_NRM)
							float3 E2T_XFORM[3];
							E2T_XFORM[0] = X_TNG_CS;
							E2T_XFORM[1] = X_BNR_CS;
							E2T_XFORM[2] = X_NRM_CS;

							FLOAT3 nrm_ts = FLOAT3(0.0, 0.0, 1.0);
							nrm_ts.xy = Sample(S_NRM, X_UV_0).ag * 2.0 - 1.0;
							nrm_ts.xy *= C_NRM_SCALE__ALPHA.xy;
							nrm_ts.z = 1.0 - dot(nrm_ts.xy , nrm_ts.xy);
							nrm_ts.z = (nrm_ts.z > 0.0) ? sqrt(nrm_ts.z) : 0.0; //removes NANs
							FLOAT3 nrm_cs = Mul33T(nrm_ts, E2T_XFORM);

							O_NRM.xyz = nrm_cs * 0.5 + 0.5;
							O_NRM.w = O_SPC.w * C_NRM_SCALE__ALPHA.z;
						#endif
                    }
                }
            }
        }
    }
}
