//new

using engineflags;
using settemplates;
using tmu;

template
{   
	category Main
	{
		string_dat s_clr = s_tex_def;
		string_dat s_deform = s_tex_def;
		float_dat f_wave_speed = 1.0;
		float_dat f_wave_scale = 1.0;
		bool_dat b_decal = TRUE;
	}
	
    templatebody()
    {
		tech(s_tech_opq_clr)
        {
	
			Cull(NONE);
			DepthFunc(LEQUAL, FALSE);
			BlendFunc(SRC_ALPHA, INV_SRC_ALPHA, ZERO, INV_SRC_ALPHA);
			BlendFunc(SRC_ALPHA, INV_SRC_ALPHA, ZERO, INV_SRC_ALPHA, 1);
			
			Input I_POS_MS = new InputFloat4("POSITION");
			Input I_UV_0 = new InputFloat2("TEXCOORD0");

			Output O_SPC = new OutputFLOAT4("COLOR0");
			Output O_DIF = new OutputFLOAT4("COLOR1");

			X_UV_0 = SetTexcoord2();			
			X_UV_1 = SetTexcoord2();
			X_UV_2 = SetTexcoord2();
			
			SetFixedUV(X_UV_0);	

			extern float_dat TIME; 
			C_UV_SCALE = SetConst(f_wave_scale, f_wave_scale);
			C_UV_1_ADD = SetConst(0.0, -TIME * 0.1 * f_wave_speed);
			C_UV_2_ADD = SetConst(0.25, 0.25 - TIME * 0.2 * f_wave_speed);
			
			
			
			
			if(s_clr != s_tex_def)
			{
				S_CLR = SetTexture(s_clr);
			}
			else
			{
				S_CLR = SetTexture(0);
			}
			
			if(s_deform != s_tex_def)
			{
				S_DEFORM = SetTexture(s_deform);
			}
			else
			{
				S_DEFORM = SetTexture(1);
			}
			
			if(b_decal)
			{
			  Define("DECAL", 1);
			}
						
			VertexShader()
			{
				if(b_decal) 
  			    { 
					use Instancing(); 
				}
				  
				hlsl()
				{
					
					#include <master_new.hlsl>
					
					void main()
					{
						float4 v_pos_ws = Mul_Pos(Decode_Pos(I_POS_MS), MODEL_XFORM_4x3);
						V_POS_OUT_TC = Pos_Out_WS(v_pos_ws);
						X_UV_0 = Decode_UV(I_UV_0);
						X_UV_1 = X_UV_0 * C_UV_SCALE + C_UV_1_ADD;
						X_UV_2 = X_UV_0 * C_UV_SCALE + C_UV_2_ADD;		
					}
				}

			}

			PixelShader()
			{
				hlsl()
				{		
					#include <master_new.hlsl>

					void main()
					{
						O_SPC = Sample(S_CLR, X_UV_0);
						FLOAT4 deform_a = Sample(S_DEFORM, X_UV_1);
						FLOAT4 deform_b = Sample(S_DEFORM, X_UV_2);
						O_SPC.rgb += deform_a.r + deform_b.r;
						// O_SPC.rgb = saturate(SwizzleXXX(1.0) - O_SPC.rgb);
						//O_SPC.a *= (deform_a.g + deform_b.g) * 0.1;
						O_DIF = O_SPC * 0.5;
					}
				}
			}
        }
    }
}

  
