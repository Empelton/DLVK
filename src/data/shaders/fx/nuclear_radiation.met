//new

using engineflags;
using settemplates;
using tmu;

template
{   
	category Main
	{
	}
	
    templatebody()
    {
		tech(s_tech_trn)
        {
					
			Cull(NONE);
            DepthFunc(LEQUAL, TRUE);
            BlendFunc(ONE, ONE, ONE, ONE);
			   
			Input I_POS_MS = new InputFloat4("POSITION");
			Input I_UV_0 = new InputFloat2("TEXCOORD0");
			
			Output O_CLR = new OutputFLOAT4("COLOR0");

			X_UV_0 = SetTexcoord2();			
			X_CLR_VRT = SetTexcoord4();
			

			S_CLR = SetTexture("nuclearRadiation.dds", e_tex_filter_def, MIRROR, MIRROR, false);
			
						
			VertexShader()
			{
				hlsl(s_hlsl_profile_def)
				{
					
					#include <master_new.hlsl>

					void main()
					{
						FLOAT4 v_userColor = CONST_0;

						FLOAT4 pos = Decode_Pos(I_POS_MS);
						
						float mod = TIME + pos.x + pos.y + pos.z;
						pos.xyz *= sin( 2 * mod );
						
						V_POS_OUT_TC =  Pos_Out(pos);
						X_UV_0 =  Decode_UV(I_UV_0);
						
						X_CLR_VRT =  CONST_0 * float4(1.0, 0.4, 0.4, 1.0);												
					}
				}

			}

			PixelShader()
			{
				hlsl(s_hlsl_profile_def)
				{
					
					#include <master_new.hlsl>

					void main()
					{
						FLOAT4 clr = Sample(S_CLR, -X_UV_0);

						O_CLR = SwizzleXXXX(1.0 - clr.g);
						O_CLR *= O_CLR * O_CLR * X_CLR_VRT;
						O_CLR *= 10.0;
					}
				}
			}
        }
    }
}

  
