//new

using engineflags;
using settemplates;
using tmu;
using attribs;

public class FXTech_Variants : StringVariantConv
{
    public static object[] Data = { "s_tech_opq_clr", "s_tech_trn", "\"glow_0\"", "\"glow_1\"" };
    public override object[] GetData() {return Data;}
}

public class FXType_Variants : StringVariantConv
{
    public static object[] Data = { "e_type_fx_ws", "e_type_fx_cs" };
    public override object[] GetData() {return Data;}
}

template
{
	public string TemplateCategory() { return "FX"; }

	category Basic
	{
		class Main
		{
			string_dat clr_0_tex = s_tex_def : editor(ImageFileNameEditor), display(Color texture);
			string_dat clr_0_tex_ps3 = "" : editor(ImageFileNameEditor), display(Color texture on PS3);
			int_dat clr_0_usermap = 0 : display(Color usermap);
			string_dat fx_tech = s_tech_trn : converter(FXTech_Variants), display(Technique);
			int_dat fx_type = e_type_fx_ws : converter(FXType_Variants), display(Type);
			int_dat blend_mode = e_bm_none : converter(BlendModeSoft_Variants), display(Blending mode);
			float_dat dpt_threshold = 0.0 : display(Depth blending distance);
			bool_dat lighting_on = FALSE : display(Sun lighting);
		}
		class Sampling
		{
			int_dat tex_tile = WRAP : converter(TexTile_Variants), display(Tile);
			int_dat tex_filtering = LINEAR_MIP_POINT : converter(Filter_Variants), display(Filtering);
		}
		class Animation
		{
			bool_dat animation_blend_on = FALSE : display(Animation blend);
			int_dat frames_per_column = 4 : display(Frames per column);
			int_dat frames_per_row = 4 : display(Frames per row);
		}
		class TextureShift
		{
			bool_dat texture_shift_on = FALSE : display(Texture shift);
			string_dat mask_tex	= s_tex_def : editor(ImageFileNameEditor), display(Fire mask);
			string_dat grad_tex = s_tex_def : editor(ImageFileNameEditor), display(Fire gradient);
			float_dat mask_rotate_speed = 10.0 : display(Mask rotation speed);
			bool_dat blend_alpha = FALSE : display(Blend fire alpha);
			float_dat grad_scale = 1.4 : display(Gradient scale);
			float_dat grad_bias = -0.2 : display(Gradient bias);
		}
	}

	category Advanced
	{
		class Blending
		{
			bool_dat override_blending = FALSE;
			int_dat src_clr_blend = ONE : converter(Blending_Variants);
			int_dat dst_clr_blend = ZERO : converter(Blending_Variants);
			int_dat src_alpha_blend = ONE : converter(Blending_Variants);
			int_dat dst_alpha_blend = ZERO : converter(Blending_Variants);
		}
		class Miscellaneous
		{
			string_dat __clr_tex = "v_tex";
			bool_dat fog_on = TRUE;
			bool_dat different_lighting = FALSE;
			int_dat depth_func = LEQUAL;
			bool_dat fx_flow_on = FALSE : display(FX flow control enabled);
		}
	}

    templatebody()
    {
		platform("*", "none; instancing");

		tech(fx_tech)
        {
			Cull(NONE);
			DepthFunc(depth_func, FALSE);

			Input I_POS_MS = new InputFloat4("POSITION");
			Input I_UV_0 = new InputFloat2("TEXCOORD0");
			Input I_CLR_0 = new InputFloat4("COLOR0");

			Output O_RT0 = new OutputFLOAT4("COLOR0");
			if(fx_tech == s_tech_opq_clr)
			{
				Define("D_OPQ_CLR_ON", 1);
				Output O_RT1 = new OutputFLOAT4("COLOR1");
			}
			X_CLR_VRT = SetTexcoord4();
			X_UV_0 = SetTexcoord2();

			extern int_dat SHADER_PATH;
			clr_0_tex = ((SHADER_PATH == SM32) & (clr_0_tex_ps3 != "")) ? clr_0_tex_ps3 : clr_0_tex;

			if( clr_0_tex != s_tex_def )
			{
				S_CLR = SetTexture(clr_0_tex, tex_filtering, tex_tile, tex_tile, If(fx_tech == s_tech_opq_clr, false, true));
			}
			else
			{
				S_CLR = SetTexture(clr_0_usermap, tex_filtering, tex_tile, tex_tile, If(fx_tech == s_tech_opq_clr, false, true));
			}

			extern float_dat f_pp_hdr_intensity_fx_add;
			extern float_dat f_pp_hdr_intensity_fx_lerp;
			extern vec3_dat v_pp_shading_sun_color;
            extern vec3_dat v_pp_ambient_color;
			extern float_dat TIME;
			mtx_dat m_uv_dis_1 = translate(0.5, 0.5, 0.0) * rotate(0.0, 0.0, TIME * 10.0 * mask_rotate_speed) * translate(-0.5, -0.5, 0.0);
			mtx_dat m_uv_dis_2 = translate(0.5, 0.5, 0.0) * rotate(0.0, 0.0, -TIME * 10.0 * mask_rotate_speed) * translate(-0.5, -0.5, 0.0);

			float_dat f_fx_intensity = 1.0;

			if(animation_blend_on)
			{
				Define("ANIMATION_BLEND_ON", 1);
				X_UV_1 = SetTexcoord2();
				X_UV_2 = SetTexcoord2();
				X_BLEND_VALUE = SetTexcoord();
			}

			if(texture_shift_on)
			{
				Define("TEXTURE_SHIFT_ON", 1);
				X_UV_3 = SetTexcoord2();
				X_UV_4 = SetTexcoord2();
				X_MASK = SetTexcoord2();
				X_REF_VALUE = SetTexcoord();

				S_CLR_MASK = SetTexture(mask_tex, e_tex_filter_def, CLAMP, CLAMP, true);
				S_CLR_GRAD = SetTexture(grad_tex, e_tex_filter_def, MIRROR, MIRROR, true);

				if(blend_alpha)
				{
					Define("BLEND_MASK_ALPHA_ON", 1);
				}
				C_FX_ADD_INTENSITY = SetConst(f_pp_hdr_intensity_fx_add);
			}

			if(override_blending)
			{
				BlendFunc(src_clr_blend, dst_clr_blend, src_alpha_blend, dst_alpha_blend);
				if(fx_tech == s_tech_opq_clr)
				{
					BlendFunc(src_clr_blend, dst_clr_blend, src_alpha_blend, dst_alpha_blend, 1);
				}
			}
			else
			{
				if(blend_mode == e_bm_lerp)
				{
					if(fx_tech != s_tech_trn)
					{
						BlendFunc(DST_ALPHA, ONE, ZERO, INV_SRC_ALPHA);
						if(fx_tech == s_tech_opq_clr)
						{
							BlendFunc(DST_ALPHA, ONE, ZERO, INV_SRC_ALPHA, 1);
						}					
					}
					else
					{
						BlendFunc(SRC_ALPHA, INV_SRC_ALPHA, ZERO, ONE);
						BlendFunc(ZERO, INV_SRC_ALPHA, ZERO, ONE, 1);
						Output O_RT1 = new OutputFLOAT4("COLOR1");
						Define("D_SKY_MASK_ON", 1);
					}

					f_fx_intensity = f_pp_hdr_intensity_fx_lerp;
					Define("BM_LERP_ON", 1);
				}
				if(blend_mode == e_bm_add)
				{
					BlendFunc(ONE, ONE, ZERO, ONE);
					if(fx_tech == s_tech_opq_clr)
					{
						BlendFunc(ONE, ONE, ZERO, ONE, 1);
					}					
					f_fx_intensity = f_pp_hdr_intensity_fx_add;
					Define("BM_ADD_ON", 1);
				}

				if(blend_mode == e_bm_mul)
				{
					BlendFunc(ZERO, SRC_COLOR, ZERO, ONE);
					if(fx_tech == s_tech_opq_clr)
					{
						BlendFunc(ZERO, SRC_COLOR, ZERO, ONE, 1);
					}					
				}
			}

			if(fx_type == e_type_fx_ws) { Define("FX_WORLD_ON", 1); }
			if(fx_type == e_type_fx_cs) { Define("FX_CAMERA_ON", 1); }

			C_DIS_1_XFORM = SetConst(m_uv_dis_1);
			C_DIS_2_XFORM = SetConst(m_uv_dis_2);
			C_FX_INTENSITY = SetConst(f_fx_intensity);
			C_DPT_THRESHOLD = SetConst(If(dpt_threshold != 0.0, 1.0 / dpt_threshold, 0.0));
			C_LIGHT_CLR = SetConst(v_pp_ambient_color + v_pp_shading_sun_color);
			C_UV_STEP = SetConst(1.0 / frames_per_row, 1.0 / frames_per_column);
			C_GRAD_SCALE = SetConst(grad_scale);
			C_GRAD_BIAS = SetConst(grad_bias);

            C_FRAMES_NR = SetConst(frames_per_column * frames_per_row - 1);
            C_FRAMES_COLUMN = SetConst(frames_per_column);
            C_FRAMES_ROW = SetConst(frames_per_row);

			Define("__CLR_TEX", __clr_tex);

			if((dpt_threshold >= 0.0) & (depth_func == LEQUAL))
			{
				if(dpt_threshold > 0.0)
				{
					Define("DEPTH_BLENDING_ON", 1);
					X_DPT = SetTexcoord();
				}
				else
				{
					if(fx_tech != s_tech_trn) {
						Define("DEPTH_TEST_ON", 1);
						X_DPT = SetTexcoord();
					}
				}
				if(fx_tech == s_tech_vfb)
				{
					S_DPT_DS = SetTexture(8, NO_FILTERING, CLAMP, CLAMP, false);
				}
				if(fx_tech == s_tech_trn) { use PP_DEPTH_TMU(); }
			}

			if(fx_tech == s_tech_vfb) { Define("VFB_ON", 1); }
			if(fx_tech == s_tech_trn) { Define("TRN_ON", 1); }

			if(lighting_on)
			{
				Define("LIGHTING_ON", 1);
				S_SHD = SetTexture(i_um_fx_lighting, LINEAR_NO_MIP, CLAMP, CLAMP, FALSE);
			}

			if(different_lighting)
			{
				Define("LIGHTING_1_ON", 1);
			}

			if(fog_on & fx_tech != s_tech_opq_clr)
			{
				Define("FOG_ON", 1);

				if(blend_mode == e_bm_lerp)
				{
					X_FOG = SetTexcoord3();
				}
				extern vec3_dat v_pp_sun_scattering_dir;
				extern mtx_dat VIEW_XFORM;
				vec3_dat sun_dir = (fx_type == e_type_fx_ws) ? v_pp_sun_scattering_dir : mulv(VIEW_XFORM, v_pp_sun_scattering_dir);
				C_SUN_SCATTERING_DIR = SetConst(sun_dir);
			}

			if(fx_flow_on)
			{
				X_THRESHOLD = SetTexcoord();
			}

			VertexShader()
			{
				hlsl()
				{
					#include <master_new.hlsl>

					#if defined(FOG_ON)
						#include <fog.hlsl>
					#endif

					void main()
					{
						V_POS_OUT_TC = Mul44(I_POS_MS, COMBINED_XFORM);
						X_UV_0 = I_UV_0;

						#if defined(DEPTH_BLENDING_ON) || defined(DEPTH_TEST_ON)
							X_DPT = V_POS_OUT_TC.w;
							#if defined(DEPTH_BLENDING_ON)
								X_DPT *= C_DPT_THRESHOLD;
							#endif
						#endif

						#if defined(ANIMATION_BLEND_ON) || defined(TEXTURE_SHIFT_ON) || defined(X_THRESHOLD)
							X_CLR_VRT.rgb = float3(1.0, 1.0, 1.0);
						#else
							X_CLR_VRT.rgb = pow(I_CLR_0.rgb, float3(2.2, 2.2, 2.2));
						#endif

						#if defined(ANIMATION_BLEND_ON)
                            FLOAT f_frame_blend = C_FRAMES_NR * I_CLR_0.x;
                            int i_frame_0 = int(C_FRAMES_NR * I_CLR_0.x);

                            int i_frame_0x = i_frame_0 % int(C_FRAMES_ROW);
                            int i_frame_0y = int(i_frame_0 / C_FRAMES_ROW);

                            int i_frame_1 = int(C_FRAMES_NR * I_CLR_0.x);
                            i_frame_1 = min(int(C_FRAMES_NR), i_frame_1 + 1);

                            int i_frame_1x = i_frame_1 % int(C_FRAMES_ROW);
                            int i_frame_1y = int(i_frame_1 / C_FRAMES_ROW);

							X_UV_1 = X_UV_0 + C_UV_STEP * FLOAT2(i_frame_0x, i_frame_0y);
							X_UV_2 = X_UV_0 + C_UV_STEP * FLOAT2(i_frame_1x, i_frame_1y);
							X_BLEND_VALUE = frac(f_frame_blend);
						#endif

						#if defined(TEXTURE_SHIFT_ON)
							X_UV_3 = Mul42(float4(X_UV_0, 0.0, 1.0), C_DIS_1_XFORM);
							X_UV_4 = Mul42(float4(X_UV_0, 0.0, 1.0), C_DIS_2_XFORM);

							X_MASK = I_CLR_0.ra;
							X_REF_VALUE = C_GRAD_SCALE * I_CLR_0.r + C_GRAD_BIAS;
						#endif

						X_CLR_VRT.a = I_CLR_0.a;

						#if (defined(DEPTH_BLENDING_ON) || defined(DEPTH_TEST_ON)) && defined(VFB_ON)
							X_CLR_VRT.a *= 0.25;
						#endif

						#if defined(FOG_ON)
							float3 v_cam_dir = -I_POS_MS.xyz;
							#if defined(FX_WORLD_ON)
								v_cam_dir += CAMERA_POS_WS.xyz;
							#endif

							float3 scattering_ext = Scattering_Ext(length(v_cam_dir));
							#if defined(X_FOG)
								X_FOG = Scattering_Ins(scattering_ext, normalize(v_cam_dir), C_SUN_SCATTERING_DIR);
							#endif

							X_CLR_VRT.xyz *= scattering_ext;
						#endif

						#if defined(BM_LERP_ON) && !defined(LIGHTING_ON)
							#if defined(LIGHTING_1_ON)
								X_CLR_VRT.xyz += X_CLR_VRT.xyz * C_LIGHT_CLR.xyz;
							#else
								X_CLR_VRT.xyz *= C_LIGHT_CLR.xyz;
							#endif
						#endif

						X_CLR_VRT.xyz *= C_FX_INTENSITY;

						#if defined(X_THRESHOLD)
							X_THRESHOLD = (256.0/255.0) - I_CLR_0.z;
						#endif
					}
				}
			}

			PixelShader()
			{
				hlsl()
				{
					#include <master_new.hlsl>
					#include <depth_sample.hlsl>
					#include <colorops.hlsl>

					void main()
					{
						#if defined(ANIMATION_BLEND_ON)
							FLOAT4 v_clr_0 = Sample(S_CLR, X_UV_1);
							FLOAT4 v_clr_1 = Sample(S_CLR, X_UV_2);

							FLOAT4 v_tex = lerp(v_clr_0, v_clr_1, X_BLEND_VALUE);
						#else
							FLOAT4 v_tex = Sample_h4(S_CLR, X_UV_0);
						#endif

						FLOAT4 v_clr = __CLR_TEX;

						#if defined(X_THRESHOLD)
							clip(v_clr.w - X_THRESHOLD);
						#endif

						#if defined(TEXTURE_SHIFT_ON)
							FLOAT f_fire_height = saturate(0.5 * (Sample_h2(S_CLR_MASK, X_UV_3).g + Sample_h2(S_CLR_MASK, X_UV_4).g));

							float f_uv_x = 1.0 - saturate(X_REF_VALUE * f_fire_height);

							FLOAT4 v_clr_fire = Sample_h4(S_CLR_GRAD, f_uv_x);
							float f_fire_mask = saturate((X_MASK.r + f_fire_height - 1.0));
							float f_fire_alpha = saturate(4.0 * X_MASK.g * X_MASK.r * f_fire_mask);
							v_clr.w *= X_MASK.g;
						#endif

						#if defined(DEPTH_BLENDING_ON) || defined(DEPTH_TEST_ON) || defined(LIGHTING_ON)
							FLOAT2 v_uv_screen = UV_Screen(V_POS_SS_TC);
						#endif

						FLOAT f_dpt_blend = 1.0;
						#if defined(DEPTH_BLENDING_ON) || defined(DEPTH_TEST_ON)
							#if defined(TRN_ON)
								FLOAT f_dpt = Depth_Sample(v_uv_screen);
								FLOAT f_dpt_cmp = saturate(f_dpt * C_DPT_THRESHOLD - X_DPT);
								f_dpt_blend = f_dpt_cmp * X_CLR_VRT.w;
							#else
								FLOAT4 v_dpt = Sample_h4(S_DPT_DS, v_uv_screen);
								#if defined(DEPTH_BLENDING_ON)
									FLOAT4 v_dpt_cmp = saturate(v_dpt * C_DPT_THRESHOLD - X_DPT);
								#else
									FLOAT4 v_dpt_cmp = IF(greaterThan(X_DPT.xxxx, v_dpt), SwizzleXXXX(1.0), SwizzleXXXX(0.0));
								#endif
								f_dpt_blend = dot(v_dpt_cmp, X_CLR_VRT.wwww);
							#endif
						#else
							f_dpt_blend = X_CLR_VRT.w;
						#endif

						O_RT0 = v_clr.wwww * f_dpt_blend;

						FLOAT3 v_lit = v_clr.xyz * X_CLR_VRT.xyz;

						#if defined(LIGHTING_ON)
							FLOAT3 v_shd_clr = Sample(S_SHD, v_uv_screen, 0.0).xyz;

							#if defined(SHADER_PATH_X360)
								v_shd_clr *= 32.0;
							#endif

							#if defined(LIGHTING_1_ON)
								v_lit += X_CLR_VRT.xyz * v_shd_clr;
							#else
								v_lit *= v_shd_clr;
							#endif

						#endif

						#if defined(X_FOG)
							v_lit += X_FOG.xyz;
						#endif

						#if defined(TEXTURE_SHIFT_ON)
							v_lit += v_clr_fire.xyz * SwizzleXXX(C_FX_ADD_INTENSITY);
						#endif

						#if defined(BM_LERP_ON)
							#if defined(TRN_ON)
								O_RT0.xyz = v_lit.xyz;
							#else
								O_RT0.xyz *= v_lit.xyz;
							#endif
						#else
							O_RT0.xyz = v_lit.xyz * f_dpt_blend;
						#endif

						#if defined(TEXTURE_SHIFT_ON) && defined(BLEND_MASK_ALPHA_ON)
							f_fire_alpha *= f_dpt_blend;
							float f_blend_factor = saturate(X_MASK.r);
							O_RT0.w = lerp(O_RT0.w, f_fire_alpha, f_blend_factor);
						#endif

						#if defined(D_SKY_MASK_ON)
							O_RT1 = O_RT0.wwww * float4(0.0, 0.0, 0.0, 1.0); //blend to 0.0
						#endif
						
						#if defined(D_OPQ_CLR_ON)
							O_RT1 = O_RT0;
							O_RT0.xyz = SwizzleXXX(Luminance(O_RT0.xyz));
						#endif
					}
				}
			}
        }
    }
}


