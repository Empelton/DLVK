//new

using engineflags;
using settemplates;
using tmu;

template
{
	public string TemplateCategory() { return "Objects FX"; }

	category Main
	{
		bool_dat cone_clip = FALSE : display(Cone Clip);
	}

	templatebody()
	{
		platform("*", "none; instancing");

		tech("rfr3")
		{
			Cull(CCW);
			DepthFunc(ALWAYS, FALSE);

			Input I_POS_MS = new InputFloat4("POSITION");
			Input I_CLR_USR = new InputFloat4("COLOR_USER");

			X_INVMODELVIEW_XFORM = SetTexcoord4Array(3, "float");

			X_CLR = SetTexcoord3();
			X_OPACITY = SetTexcoord();
			X_COLOR_RANGE = SetTexcoord();
			X_DEPTH = SetTexcoord();
	

			Output O_CLR = new OutputFLOAT4("COLOR0");

			use PP_DEPTH_TMU();
			use PP_NORMAL_TMU();
			S_RFR = SetTexture(i_um_hdr_buffer_copy, LINEAR_NO_MIP, MIRROR, MIRROR, TRUE);
			
			extern float_dat f_pp_hdr_intensity_emissive;
			C_INTENSITY = SetConst(f_pp_hdr_intensity_emissive * 4.0);

			if(cone_clip)
            {
                Define("D_CONE_CLIP", 1);
            } 
			VertexShader()
			{
				use Instancing();

				hlsl()
				{
					#include <common.hlsl>
					#include <master_new.hlsl>

					void main()
					{
						float4 pos_ms = Decode_Pos(I_POS_MS);
						float4 pos_ws = Mul_Pos(pos_ms, MODEL_XFORM_4x3);
						float3 v_pivot_pos_ws = float3(MODEL_XFORM_4x3[0].w, MODEL_XFORM_4x3[1].w, MODEL_XFORM_4x3[2].w);
						X_DEPTH =  length(v_pivot_pos_ws - pos_ws.xyz) ;
						V_POS_OUT_TC = Pos_Out_WS(pos_ws);

						float4 m_model[3];
						m_model[0] = MODEL_XFORM_4x3[0];
						m_model[1] = MODEL_XFORM_4x3[1];
						m_model[2] = MODEL_XFORM_4x3[2];

						float4 m_modelview[3];
						MulMTX(m_model, VIEW_XFORM, m_modelview);

						InvertMTX(m_modelview, X_INVMODELVIEW_XFORM);

						#if defined(SHADER_PATH_PS3)
							X_INVMODELVIEW_XFORM[0] *= V_POS_OUT_TC.w;
							X_INVMODELVIEW_XFORM[1] *= V_POS_OUT_TC.w;
							X_INVMODELVIEW_XFORM[2] *= V_POS_OUT_TC.w;
						#endif

						float4 usr_1 = SwizzleXXXX(0.0);
						float4 usr_0 = Decode_Usr(I_CLR_USR, usr_1);
						X_CLR = pow(usr_0.xyz, SwizzleXXX(2.2)) * C_INTENSITY;
						X_OPACITY = usr_0.w;
						X_COLOR_RANGE = usr_1.w * 255.0;
					}
				}
			}

			PixelShader()
			{
				hlsl()
				{
					#include <common.hlsl>
					#include <master_new.hlsl>

					void main()
					{
						FLOAT2 uv_screen = UV_Screen(V_POS_SS_TC);

					    FLOAT depth = Depth_Sample(uv_screen);
						// since we use inverted depth for AMDs GCN (Orbis&Durango&PC). Untouched pixels hold 0.f z value that turns to +inf depth
						// we need to clamp that value to prevent NaNs (caught on PS4)
						depth = min(depth, 67108864);

					    FLOAT4 pos_cs = Pos_CS(depth, V_POS_SS_TC);

						FLOAT3 pos_ms = Mul43(pos_cs, X_INVMODELVIEW_XFORM);
						
						FLOAT2 fades = SwizzleXX( dot(pos_ms.xyz, pos_ms.xyz) );
						fades = saturate(fades * FLOAT2(1.0, -8.0) + FLOAT2(0.0, 8.0));
						
						#if defined (D_CONE_CLIP)
							FLOAT fade_clip= pos_ms.z/abs(pos_ms.x) > 1 ? 1.0 : 0.0;
							fades *= fade_clip;
						#endif

						FLOAT fade = saturate(fades.x * fades.y);
						fade *= X_OPACITY;

						float color_fade = 1.0 - saturate( (length( pos_ms * X_DEPTH  ) - X_COLOR_RANGE));
						// float color_fade = X_COLOR_RANGE ;
						clip(fade - 1.0 / 255.0);

						FLOAT2 nrm = Normal_bx2_Sample(uv_screen).xy;
						nrm *= FLOAT2(0.05, -0.05);
						uv_screen += nrm.xy * fade;

						O_CLR = Sample(S_RFR, uv_screen, 0.0);
						#if defined(SHADER_PATH_X360)
							O_CLR *= 32.0;
						#endif

						FLOAT lum = max(max(O_CLR.r, O_CLR.b), O_CLR.g);
						lum *= smoothstep(0.0,1.0,fade);
						// lum *= fade;

						O_CLR.xyz += SwizzleXXX(lum);
						O_CLR.xyz += X_CLR.xyz * color_fade * SwizzleXXX(lum);
						// O_CLR.xyz += color_fade ;
					}
				}
			}
		}
	}
}
