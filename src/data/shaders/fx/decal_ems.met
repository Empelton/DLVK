//new
using settemplates;
using engineflags;

template 
{ 
    category Basic
    {
		class Main
		{	
			string_dat clr_0_tex = "" : editor(ImageFileNameEditor), display(Color texture);
			bool_dat usr_clr_0_on = FALSE : display(User Color 0 enabled);
			bool_dat vtx_clr_on = FALSE : display(Vertex Color enabled);
		}
    }

    templatebody()
    { 
        tech("ems")
        {                                  
            Cull(NONE);
			AlphaFunc(GREATER, 0.0);
			BlendFunc(ONE, ONE, ONE, ONE);
            DepthFunc(LEQUAL, FALSE); 
			
			extern float_dat f_pp_hdr_intensity_emissive;
			C_EMS_FACTOR = SetConst(f_pp_hdr_intensity_emissive);
			
			Input I_POS_MS = new InputFloat4("POSITION");
            Input I_UV_0 = new InputFloat2("TEXCOORD0");                        

			X_UV_0 = SetTexcoord2();            
			X_CLR = SetTexcoord3();
			
			SetFixedUV(X_UV_0);	

            Output O_CLR = new OutputFLOAT4("COLOR0"); 

			if(vtx_clr_on)
			{
				Define("D_VTX_CLR_ON", 1);
				Input I_CLR_VTX = new InputFloat4("COLOR0");
			}
			if(usr_clr_0_on)
			{
				Define("D_USR_CLR_0_ON", 1);
				Input I_CLR_USR = new InputFloat4("COLOR_USER");		
			}

			if(clr_0_tex == "")
			{								
				S_CLR = SetTexture2D(0, LINEAR_MIP_LINEAR, WRAP, WRAP, false);                 								
			}			
			else
			{
				S_CLR = SetTexture2D(clr_0_tex, LINEAR_MIP_LINEAR, WRAP, WRAP, false); 
			}
            
            VertexShader()
            {
                use Instancing();

                hlsl()
                {
                    #include <master_new.hlsl>
					#include <fog.hlsl>
              
                    void main()
                    {
                        X_UV_0 = Decode_UV(I_UV_0);

						float4 pos_ms = Decode_Pos(I_POS_MS);                            
                        float4 pos_ws = Mul_Pos(pos_ms, MODEL_XFORM_4x3); 
						V_POS_OUT_TC = Pos_Out_WS(pos_ws);                            
						
						float3 cam_dir_ws = pos_ws.xyz - CAMERA_POS_WS.xyz;
						
						X_CLR = Scattering_Ext(length(cam_dir_ws));

						X_CLR *= C_EMS_FACTOR;

						#if defined(D_USR_CLR_0_ON)
							X_CLR *= pow(Decode_Usr(I_CLR_USR).xyz, SwizzleXXX(2.2));
						#endif	

						#if defined(D_VTX_CLR_ON)
							X_CLR *= pow(I_CLR_VTX.xyz, SwizzleXXX(2.2));
						#endif							
                    }
                }
            }

            PixelShader()
            {
                hlsl()
                {
                    #include <master_new.hlsl>
					
                    void main()
                    {	
                        O_CLR.xyz = Sample_h3(S_CLR, X_UV_0);

						O_CLR.xyz *= X_CLR;

						O_CLR.w = 1.0;
					}
                }
            }                
        } 
    }
}
