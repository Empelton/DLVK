//new

using engineflags;
using settemplates;
using tmu;

template
{
	category Main
	{
		string_dat s_clr = "rubbishnewspaperAnim.dds";
		float_dat f_animation_speed = 1.5;
		int_dat i_number_of_frames = 8;
		float_dat deformation_scale = 15.0;
		float_dat f_depth_blending = 50.0;
		float_dat f_depth_blend_distance = 50.0;
		bool_dat b_depth_filtered_on = FALSE;
	}

    public  bool IsObsolete() { return true; }

    templatebody()
    {
		tech(s_tech_trn)
        {
			use SetupMaterial();
			Cull(NONE);
			DepthFunc(LEQUAL, FALSE);
			ColorFunc(TRUE, TRUE, TRUE, FALSE);

			Input I_POS_MS = new InputFloat4("POSITION");
			Input I_UV_0 = new InputFloat2("TEXCOORD0");
			Output O_CLR = new OutputFLOAT4("COLOR0");

			X_UV_0 = SetTexcoord2();
			X_UV_1 = SetTexcoord2();
			X_DEPTH_BLENDING = SetTexcoord();


			S_CLR = SetTexture(s_clr, LINEAR_MIP_POINT, WRAP, WRAP, false);

			C_DEPTH_BLENDING_SCALE = SetConst(1.0/f_depth_blending);


            C_FRAME_SCALE = SetConst(1.0/i_number_of_frames);
            C_FRAME_SHIFT_SCALE = SetConst(2.0/i_number_of_frames);
            C_NUMBER_OF_FRAMES_PER_CHANNEL = SetConst(i_number_of_frames/2.0);
            C_ANIMATION_SPEED = SetConst(f_animation_speed);
            C_DEFORMATION_SCALE = SetConst(deformation_scale);

			use PP_DEPTH_TMU();

			VertexShader()
			{
				hlsl(s_hlsl_profile_def)
				{

					#include <master_new.hlsl>
					#include <fog.hlsl>

					void main()
					{
						FLOAT4 posTmp = I_POS_MS;
                        posTmp.x += C_DEFORMATION_SCALE * sin(TIME+I_POS_MS/30);
                        posTmp.y += C_DEFORMATION_SCALE * sin(TIME+I_POS_MS/30);
                        posTmp.z += C_DEFORMATION_SCALE * sin(TIME+I_POS_MS/30);

						V_POS_OUT_TC = Pos_Out(posTmp);

						X_UV_0 = I_UV_0;

						X_DEPTH_BLENDING = V_POS_OUT_TC.w * C_DEPTH_BLENDING_SCALE;

						float4 v_pos_ws = Mul_Pos(I_POS_MS, INVVIEW_XFORM);

						// Texture Coordinates.
                        float scale = (C_ANIMATION_SPEED * TIME) % (int)C_NUMBER_OF_FRAMES_PER_CHANNEL;
                        scale = (scale - frac(scale)) * C_FRAME_SHIFT_SCALE;

                        float scale2 = (C_ANIMATION_SPEED * (TIME - 0.5) % (int)C_NUMBER_OF_FRAMES_PER_CHANNEL;
                        scale2 = (scale2 - frac(scale2)) * C_FRAME_SHIFT_SCALE;

                        X_UV_0.x *= C_FRAME_SCALE;
						X_UV_1 = X_UV_0;
                        X_UV_1.x += C_FRAME_SCALE;

						X_UV_0.x += scale;
						X_UV_0.x += scale;
						X_UV_1.x += scale2;
					}
				}

			}

			PixelShader()
			{
				hlsl(s_hlsl_profile_def)
				{

					#include <master_new.hlsl>
					#include <depth_sample.hlsl>

					void main()
					{
						FLOAT2 v_uv = UV_Screen(V_POS_SS_TC);

						float f_depth = Depth_Sample(v_uv);

						float f_depth_opacity = saturate(f_depth * C_DEPTH_BLENDING_SCALE - X_DEPTH_BLENDING);

						FLOAT4 v_clr = Sample(S_CLR, X_UV_0);
						FLOAT4 v_clr_2 = Sample(S_CLR, X_UV_1);

                        v_clr = saturate(lerp(v_clr, v_clr_2, abs(frac(C_ANIMATION_SPEED * TIME)*2.0-1.0) ));
						v_clr *= v_clr;

						O_CLR = v_clr;

						clip( O_CLR.w - 0.5 );
					}
				}
			}
        }
    }
}