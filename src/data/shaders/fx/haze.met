//new
using settemplates;
using engineflags;
using tmu;

template
{
    category Main
    {
		class Basic
		{
			vec3_dat color = vec(0.0, 0.0, 0.0) : editor(ColorRGBEditor), display(Color);
			float_dat intensity = 1.0 : display(Intensity);
			float_dat distance = 1.0 : display(Distance);
		}
		class Advanced
		{
			bool_dat decal_on = FALSE : display(Material for decal);
			bool_dat usr_clr_on = FALSE : display(User color enabled - RGB);
			bool_dat usr_dist_on = FALSE : display(User distance factor enabled - Alpha);
			bool_dat fog_pp_on = FALSE : display(Per pixel fog enabled);
		}
    }

    templatebody()
    {
		platform("*", "none; instancing");
	
        tech("haze")
        {
            Cull(NONE);
            DepthFunc(LEQUAL, FALSE);
			BlendFunc(SRC_ALPHA, INV_SRC_ALPHA, ZERO, ONE);

            Input I_POS_MS = new InputFloat4("POSITION");

            Output O_CLR = new OutputFLOAT4("COLOR0");

			X_POS_CS = SetTexcoord3();
			X_OUT = SetTexcoord4();

			C_OUT = SetConst(vec(pow(color.x * intensity, 2.2), pow(color.y * intensity, 2.2), pow(color.z * intensity, 2.2), 1.0 / distance));

			use PP_DEPTH_TMU();

			extern vec3_dat v_pp_sun_scattering_dir;
			C_SUN_SCATTERING_DIR = SetConst(v_pp_sun_scattering_dir);

			if(fog_pp_on)
			{
				Define("D_FOG_PP_ON", 1);
			}

			if(usr_clr_on | usr_dist_on)
			{
				if(decal_on)
				{
					Define("D_DECAL_ON", 1);
					Input I_CLR_USR = new InputFloat4("COLOR0");
				}
				else
				{
					Input I_CLR_USR = new InputFloat4("COLOR_USER");
				}
				if(usr_clr_on)
				{
					Define("D_USR_CLR_ON", 1);
				}
				if(usr_dist_on)
				{
					Define("D_USR_DIST_ON", 1);
				}
			}

            VertexShader()
            {
                use Instancing();

                hlsl()
                {
                    #include <master_new.hlsl>

					#if !defined(D_FOG_PP_ON)
						#include <fog.hlsl>
					#endif

                    void main()
                    {
						float4 pos_ms = Decode_Pos(I_POS_MS);
						float4 pos_ws = Mul_Pos(pos_ms, MODEL_XFORM_4x3);

						V_POS_OUT_TC = Pos_Out_WS(pos_ws);

						X_POS_CS = Mul_Pos(pos_ws, VIEW_XFORM).xyz;

						X_OUT = C_OUT;

						#if defined(D_USR_CLR_ON) || defined(D_USR_DIST_ON)
							float4 usr_0 = I_CLR_USR;
							#if !defined(D_DECAL_ON)
								usr_0 = Decode_Usr(usr_0);
							#endif
							#if defined(D_USR_CLR_ON)
								X_OUT.xyz *= pow(usr_0.xyz, 2.2);
							#endif
							#if defined(D_USR_DIST_ON)
								X_OUT.w /= usr_0.w;
							#endif
						#endif

						#if !defined(D_FOG_PP_ON)
							X_OUT.xyz = ScatteringApply(normalize(X_POS_CS), C_SUN_SCATTERING_DIR, length(X_POS_CS), X_OUT.xyz);
						#endif
                    }
                }
            }

            PixelShader()
            {
                hlsl()
                {
                    #include <master_new.hlsl>
                    #include <depth_sample.hlsl>
					#if defined(D_FOG_PP_ON)
						#include <fog.hlsl>
					#endif

                    void main()
                    {
						O_CLR = X_OUT;

						float2 uv_screen = UV_Screen(V_POS_SS_TC);
						float dpt = Depth_Sample(uv_screen);
						float3 pos_cs = Pos_CS(dpt, V_POS_SS_TC).xyz;

						float3 srf2bkg_dir = X_POS_CS - pos_cs;
						float dist = length(srf2bkg_dir);

						O_CLR.w = saturate(dist * O_CLR.w);

						#if defined(D_FOG_PP_ON)
							O_CLR.xyz = ScatteringApply(normalize(X_POS_CS), C_SUN_SCATTERING_DIR, length(X_POS_CS), O_CLR.xyz);
						#endif
                    }
                }
            }
        }
    }
}
