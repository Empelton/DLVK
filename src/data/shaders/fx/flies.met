//new

using engineflags;
using settemplates;
using tmu;

template
{   
	category Main
	{
		string_dat s_clr = "rubbishnewspaperAnim.dds";
	}
	
    templatebody()
    {
		tech(s_tech_std)
        {					
			Cull(NONE);
			DepthFunc(LEQUAL, FALSE);
			AlphaFunc(GEQUAL, 0.05);
			BlendFunc(SRC_ALPHA, INV_SRC_ALPHA, ZERO, ONE);
			
			Input I_POS_MS = new InputFloat4("POSITION");
			Input I_UV_0 = new InputFloat2("TEXCOORD0");
			Input I_CLR_0 = new InputFloat4("COLOR0");
			
			Output O_CLR = new OutputFLOAT4("COLOR0");

			X_UV_0 = SetTexcoord2();	
			X_UV_1 = SetTexcoord2();
			X_UV_2 = SetTexcoord2();
			
			X_CLR_0 = SetTexcoord4();
			
			use PP_DEPTH_TMU();
			S_CLR = SetTexture(s_clr, LINEAR_MIP_LINEAR, CLAMP, CLAMP, false);
						
			VertexShader()
			{
				hlsl(s_hlsl_profile_def)
				{
					
					#include <master_new.hlsl>

					void main()
					{
						V_POS_OUT_TC = Pos_Out(I_POS_MS);

						X_CLR_0 = CONST_0;
						X_CLR_0.a = I_CLR_0.a;
						
						float2 v_uv_0 = I_UV_0;
						X_UV_0 = v_uv_0;		
						X_UV_1 = v_uv_0 * 5.0;
						X_UV_2 = X_UV_1;
						X_UV_2.x += TIME;
						X_UV_1.y += TIME;
					}
				}

			}

			PixelShader()
			{
				hlsl(s_hlsl_profile_def)
				{
					
					#include <master_new.hlsl>

					void main()
					{
					    FLOAT mask = (1 - Sample_h4(S_CLR, X_UV_0).a);
						mask *= mask;
						FLOAT flies = Sample_h2(S_CLR, X_UV_1).g * Sample_h2(S_CLR, X_UV_2).g
						+ mask;
						O_CLR = FLOAT4(0.0, 0.0, 0.0, saturate(1.0 - flies)) * X_CLR_0;
					}
				}
			}
        }
    }
}

  
