//new

using engineflags;
using settemplates;

template
{
	public string TemplateCategory() { return "Objects FX"; }

	category Main
	{
		class Noises
		{
			string_dat clr_0_tex = "" : editor(ImageFileNameEditor), display(Primary texture);
			string_dat clr_1_tex = "" : editor(ImageFileNameEditor), display(Secondary texture);
		}
		class Global
		{
			string_dat dye_tex = "" : editor(ImageFileNameEditor), display(Global map);
			bool_dat vtx_rgb_on = FALSE : editor(ImageFileNameEditor), display(Vertex color enabled);
			bool_dat vtx_a_on = FALSE : editor(ImageFileNameEditor), display(Vertex alpha opacity enabled);
		}
		class UV
		{
            bool_dat clr_0_uv_xform_on = FALSE : display(Primary texture UV transformtion enabled);
            mtx_dat mtx_clr_0_uv = scale(1.0) : display(Primary texture UV transformtion matrix);
            bool_dat clr_1_uv_xform_on = FALSE : display(Secondary texture UV transformtion enabled);
            mtx_dat mtx_clr_1_uv = scale(1.0) : display(Secondary texture UV transformtion matrix);
		}
		class Blending
		{
            bool_dat add_on = FALSE : display(Addtive blending enabled);
		}
	}

    templatebody()
    {
		platform("*", "none; instancing");

		tech("trn_first")
        {
			Cull(CW);
			if(add_on)
			{
				Define("D_ADD_ON", 1);
				BlendFunc(ONE, ONE, ZERO, ONE);
				extern float_dat f_pp_hdr_intensity_emissive;
				C_EMS_INTENSITY = SetConst(f_pp_hdr_intensity_emissive);
			}
			else
			{
				BlendFunc(SRC_ALPHA, INV_SRC_ALPHA, ZERO, ONE);
				BlendFunc(SRC_ALPHA, INV_SRC_ALPHA, ZERO, ONE, 1);
				extern vec3_dat v_pp_shading_sun_color_clouds_fade;
				C_SUN_COLOR = SetConst(v_pp_shading_sun_color_clouds_fade);

				extern vec3_dat v_pp_sun_scattering_dir;
				C_SUN_SCATTERING_DIR = SetConst(v_pp_sun_scattering_dir);
				Output O_RT1 = new OutputFLOAT4("COLOR1"); //sky mask
			}
			DepthFunc(LEQUAL, FALSE);

			Input I_POS_MS = new InputFloat4("POSITION");
			Input I_CLR_USR = new InputFloat4("COLOR_USER");

			X_CLR = SetTexcoord4("FLOAT");
			X_CAM_DIR = SetTexcoord3("float");

			Output O_RT0 = new OutputFLOAT4("COLOR0");

			if(vtx_a_on | vtx_rgb_on)
			{
				Input I_CLR_0 = new InputFloat4("COLOR0");
				if(vtx_rgb_on) { Define("D_VTX_RGB_ON", 1); }
				if(vtx_a_on) { Define("D_VTX_A_ON", 1); }
			}

			if((clr_0_tex != "") | (clr_1_tex != ""))
			{
				Input I_UV_0 = new InputFloat2("TEXCOORD0");
				if(clr_0_tex != "")
				{
					S_CLR_0 = SetTexture2D(clr_0_tex, LINEAR_MIP_POINT, WRAP, WRAP, TRUE);
					X_UV_0 = SetTexcoord2("float");
					if(clr_0_uv_xform_on) { Define("D_CLR_0_UV_XFORM_ON", 1); }
				}
				if(clr_1_tex != "")
				{
					S_CLR_1 = SetTexture2D(clr_1_tex, LINEAR_MIP_POINT, WRAP, WRAP, TRUE);
					X_UV_1 = SetTexcoord2("FLOAT");
					if(clr_1_uv_xform_on) { Define("D_CLR_1_UV_XFORM_ON", 1); }
				}
			}
			C_MTX_CLR_0_UV = SetConst(mtx_clr_0_uv);
			C_MTX_CLR_1_UV = SetConst(mtx_clr_1_uv);

			if(dye_tex != "")
			{
				Input I_UV_1 = new InputFloat2("TEXCOORD1");
				S_DYE = SetTexture2D(dye_tex, LINEAR_MIP_POINT, CLAMP, CLAMP, TRUE);
				X_UV_DYE = SetTexcoord2("float");
			}						
			
			VertexShader()
			{
				hlsl()
				{
					#include <master_new.hlsl>
					#include <common_vs.hlsl>
					CONST_FLOAT4 GLOBAL_ENVPROBE[7];

					void main()
					{
						float4 pos_ms = Decode_Pos(I_POS_MS);
						float4 pos_ws = Mul_Pos(pos_ms, MODEL_XFORM_4x3);
						V_POS_OUT_TC = Pos_Out_WS(pos_ws);

						X_CAM_DIR = CAMERA_POS_WS.xyz - pos_ws.xyz;

						float4 usr_0 = Decode_Usr(I_CLR_USR);
						X_CLR.xyz = pow(usr_0.xyz, float3(2.2, 2.2, 2.2));
						#if defined(D_ADD_ON)
							X_CLR.xyz *= SwizzleXXX(C_EMS_INTENSITY);
						#else
							X_CLR.xyz *= C_SUN_COLOR.xyz;
							X_CLR.x += GLOBAL_ENVPROBE[0].w;
							X_CLR.y += GLOBAL_ENVPROBE[1].w;
							X_CLR.z += GLOBAL_ENVPROBE[2].w;
						#endif						
						X_CLR.w = usr_0.w;

						#if defined(D_VTX_RGB_ON)
							X_CLR.xyz *= pow(I_CLR_0.xyz, float3(2.2, 2.2, 2.2));
						#endif
						#if defined(D_VTX_A_ON)
							X_CLR.w *= I_CLR_0.w;
						#endif

						#if defined(X_UV_0) || defined(X_UV_1)
							float2 uv_0 = Decode_UV(I_UV_0);
							#if defined(X_UV_0)
								X_UV_0 = uv_0;
								#if defined(D_CLR_0_UV_XFORM_ON)
									X_UV_0 = UV_TexMod(uv_0, C_MTX_CLR_0_UV);
								#endif
							#endif
							#if defined(X_UV_1)
								X_UV_1 = uv_0;
								#if defined(D_CLR_1_UV_XFORM_ON)
									X_UV_1 = UV_TexMod(X_UV_1, C_MTX_CLR_1_UV);
								#endif
							#endif
						#endif
						#if defined(X_UV_DYE)
							X_UV_DYE = Decode_UV(I_UV_1);
						#endif
					}
				}
			}

			PixelShader()
			{
				hlsl()
				{
					#include <master_new.hlsl>
					#include <fog.hlsl>

					void main()
					{
						O_RT0 = X_CLR;

						#if defined(S_CLR_0)
							O_RT0 *= Sample(S_CLR_0, X_UV_0);
						#endif
						#if defined(S_CLR_1)
							O_RT0 *= Sample(S_CLR_1, X_UV_1);
						#endif
						#if defined(S_DYE)
							O_RT0 *= Sample(S_DYE, X_UV_DYE);
						#endif

						FLOAT cam_dir_length = length(X_CAM_DIR);
						#if defined(D_ADD_ON)
							O_RT0.xyz *= Scattering_Ext(cam_dir_length);
						#else
							O_RT0.xyz = ScatteringApply(normalize(X_CAM_DIR), C_SUN_SCATTERING_DIR, cam_dir_length, O_RT0.xyz);
							O_RT1 = O_RT0.wwww * float4(0.0, 0.0, 0.0, 1.0); //blend to 0.0
						#endif
					}
				}
			}
        }
    }
}


