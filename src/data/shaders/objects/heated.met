//new

using engineflags;
using settemplates;
using tmu;

template
{   
	category Main
	{
		string_dat clr_tex = "" : editor(ImageFileNameEditor), display(Color texture);
		int_dat mip_levels = 3 : display(Mip Levels Count);
	}

    templatebody()
    { 	
        tech("ems")
        {     		    	
    		use SetStencil();
			
		    Cull(CW); 
			DepthFunc(LEQUAL, FALSE);						
		    BlendFunc(ONE, ONE, ZERO, ONE);					
    		
			
			Input I_POS = new InputFloat4("POSITION");                   
			Input I_UV = new InputFloat2("TEXCOORD0");                   
			Input I_CLR_USR = new InputFloat4("COLOR_USER");
			
            Output O_CLR = new OutputFLOAT4("COLOR0");  
			
			int_dat mips = mip_levels - 1;
			
            C_MIP_COUNT = SetConst((float_dat)mips);
			
			X_UV_0 = SetTexcoord2();			
			X_LOD = SetTexcoord();
			
			S_CLR = SetTexture(clr_tex, LINEAR_MIP_LINEAR, CLAMP, CLAMP, false);
			
			use SetStencil();
			
    		
		    VertexShader()
		    {			
				use Instancing();
			
			    hlsl()
			    {				    
				    #include <master_new.hlsl>   								    
   				
				    void main()
				    {
					    float4 v_pos_ms = Decode_Pos(I_POS);
						float4 v_pos_ws = Mul_Pos(v_pos_ms, MODEL_XFORM_4x3);						
						
						float4 usr_1;
						float4 usr_0 = Decode_Usr(I_CLR_USR, usr_1);	

						X_UV_0 = Decode_UV(I_UV);
						float lod = 1.0 - usr_1.a;						
						
						V_POS_OUT_TC = Pos_Out_WS(v_pos_ws);	
						
                        X_LOD = lod * C_MIP_COUNT;
						
						V_POS_OUT_TC.z = (lod >= 1.0) ? -1.0 : V_POS_OUT_TC.z;						
				    }
			    }    		   
		    }

		    PixelShader()
		    {
			    hlsl()
			    {				    
				    #include <master_new.hlsl>
					
				    void main()
				    {   	
						#if defined(S_CLR)																		
							O_CLR = Sample(S_CLR, X_UV_0, X_LOD);													
							O_CLR.w = 1.0;
						#else						
							O_CLR = float4(1.0, 1.0, 1.0, 1.0);						
						#endif					    
				    }
			    }
		    }      
        }     
    }
}

  
