//new

using engineflags;
using settemplates;
using attribs;

template
{
	// public string TemplateCategory() { return "Objects"; }	

	category Basic
	{
		class Main
		{
			string_dat clr_tex = "" : editor(ImageFileNameEditor), display(Color);
			float_dat icon_f = 32.0 : editor(FloatSpinEditor);
		}
	}

	templatebody()
	{
		tech("std")
		{   
			Cull(NONE);
			DepthFunc(LEQUAL, TRUE);
			BlendFunc(SRC_ALPHA, INV_SRC_ALPHA, ZERO, ONE);		
			Input I_POS_MS = new InputFloat4("POSITION");
			Input I_UV_0 = new InputFloat2("TEXCOORD0");
			Input I_UV_1 = new InputFloat2("TEXCOORD1");
			Input I_NRM_0 = new InputFloat3("NORMAL0");
			Input I_CLR_USR = new InputFloat4("COLOR_USER");

			X_NRM = SetTexcoord3("FLOAT");
			X_UV_0 = SetTexcoord2("FLOAT");		
			
			Output O_CLR = new OutputFLOAT4("COLOR0");
			Output O_NRM = new OutputFLOAT4("COLOR1");
			
			Define("D_MID", ((float_dat)mat_dielectric) / 255.0 );		
			C_ICON = SetConst(icon_f);	
	
			if(clr_tex != "")
			{
				S_CLR = SetTexture(clr_tex, NO_FILTERING, WRAP, WRAP, false);
			}
			
			VertexShader() 
			{
				use Instancing();
				
				hlsl()
				{
					
					#include <master_new.hlsl>

					void main()
					{
						float4 pos_ms = Decode_Pos(I_POS_MS);
						float4 pos_ws = Mul_Pos(pos_ms, MODEL_XFORM_4x3);		
						V_POS_OUT_TC = Pos_Out_WS(pos_ws);					

						float4 usr_1 ;
						float4 usr_0 = Decode_Usr(I_CLR_USR, usr_1);

						float2 uv_0 = Decode_UV(I_UV_0);
						float2 uv_1 = Decode_UV(I_UV_1);
						float icon_msk = (floor(abs(uv_1.y) * 8.0));
						float uv_delta = 0.0;
						uv_0.x *= 1/ C_ICON;
						
						uv_0.x += (icon_msk == 0)? usr_0.r : 0.0;
						uv_0.x += (icon_msk == 1.0)? usr_0.g : 0.0;
						uv_0.x += (icon_msk == 2.0)? usr_0.b : 0.0;
						uv_0.x += (icon_msk == 3.0)? usr_0.a : 0.0;
						uv_0.x += (icon_msk == 4.0)? usr_1.r : 0.0;
						uv_0.x += (icon_msk == 5.0)? usr_1.g : 0.0;
						uv_0.x += (icon_msk == 6.0)? usr_1.b : 0.0;
						uv_0.x += (icon_msk == 7.0)? usr_1.a : 0.0;
						

						X_UV_0 = uv_0;
						float3 nrm_ws = Mul33(I_NRM_0, MODEL_XFORM_4x3);
						float3 nrm_es = Mul33(nrm_ws, VIEW_XFORM);
						float3 nrm_n_es = normalize(nrm_es);
						X_NRM = nrm_n_es;
					}
				}
			}
		
		PixelShader()
			{
				hlsl()
				{
					#if defined(SHADER_PATH_ORBIS)
						// #pragma PSSL_target_output_format (target 1 FMT_UNORM16_ABGR)
					#endif
					
					#include <master_new.hlsl>											
					
					void main()
					{	
						float4 clr =FLOAT4(0.015, 0.4, 0.9, 1);
						#if defined(S_CLR)
							 clr = Sample(S_CLR, X_UV_0  );
						#endif
						O_CLR = clr;

						O_NRM.xyz = X_NRM * 0.5 + 0.5;
						O_NRM.w = D_MID;										
					}
				}
			}
		}
	}		
}