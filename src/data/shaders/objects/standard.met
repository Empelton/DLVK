//new

using engineflags;
using settemplates;
using standard_opq;
using emissive;
using attribs;

template
{
	public string TemplateCategory() { return "Objects"; }

	variants
    {
        bool_dat b_hl : display(hl);
        bool_dat b_gh : display(gh);
        bool_dat b_fr : display(fr);
        bool_dat b_no_wind : display(nw);
    }

	category Basic
	{
		class Textures
		{
			string_dat dif_0_tex = "" : editor(ImageFileNameEditor), display(Difusse);
			string_dat nrm_0_tex = "" : editor(ImageFileNameEditor), display(Normal);
			string_dat spc_0_tex = "" : editor(ImageFileNameEditor), display(Specular);
			string_dat ems_0_tex = "" : editor(ImageFileNameEditor), display(Emissive);
			string_dat msk_0_tex = "" : editor(ImageFileNameEditor), display(Mask);
			string_dat skn_tex = "" : editor(ImageFileNameEditor), display(Skin Mask - High end only);
		}
		class Material Presets
		{
			int_dat mid_1 = mat_none : converter(secondary_mat_list), display(White-end material ID);
			int_dat mid_1_threshold = 255 : converter(min = 0, max = 255), display(White-end material ID threshold);
			int_dat mid_2 = mat_dielectric : converter(primary_mat_list), display(Base material ID);
			int_dat mid_0_threshold = 0 : converter(min = 0, max = 255), display(Black-end material ID threshold);
			int_dat mid_0 = mat_none : converter(secondary_mat_list), display(Black-end material ID);
		}
	}
	category Advanced
	{
		class Factors
		{
			int_dat rgh_0_min = 0 : converter(min = 0, max = 255), display(Roughness minimum);
			int_dat rgh_0_max = 255 : converter(min = 0, max = 255), display(Roughness maximum);
			float_dat nrm_0_factor = 1.0 : converter(min = 0.0, max = 1.0), display(Normal scale);
			vec4_dat ems_clr = vec(1.0, 1.0, 1.0, 1.0) : editor(ColorRGBAEditor), display(Emissive);
			int_dat spc_1_factor = 255 : converter(min = 0, max = 255), display(White-end material specular mask factor);
			int_dat spc_2_factor = 255 : converter(min = 0, max = 255), display(Base material specular mask factor);
			int_dat spc_0_factor = 255 : converter(min = 0, max = 255), display(Black-end material specular mask factor);
		}
		class Sampling
		{
			int_dat tex_tile = WRAP : converter(TexTile_Variants);
			int_dat filter_clr = ANISOTROPIC_MIP_POINT : converter(Filter_Variants);
			string_dat src_dif = "Diffuse" : converter(SourceChannels_Variants), display(Diffuse map source);
			string_dat src_dif_swz = "RGB" : converter(SourceChannelsSwzRGB_Variants), display(Diffuse map source channels);
			string_dat src_dif_mod = "" : converter(SourceChannelsMod_Variants), display(Diffuse map source swizzle);
			string_dat src_spc = "Specular" : converter(SourceChannels_Variants), display(Specular map source);
			string_dat src_spc_swz = "RGB" : converter(SourceChannelsSwzRGB_Variants), display(Specular map source channels);
			string_dat src_spc_mod = "" : converter(SourceChannelsMod_Variants), display(Specular map source swizzle);
			string_dat src_mat = "Specular" : converter(SourceChannels_Variants), display(Material map source);
			string_dat src_mat_swz = "Alpha" : converter(SourceChannelsSwz_Variants), display(Material map source channels);
			string_dat src_mat_mod = "" : converter(SourceChannelsMod_Variants), display(Material map source swizzle);
			string_dat src_rgh = "Specular" : converter(SourceChannels_Variants), display(Roughness map source);
			string_dat src_rgh_swz = "Alpha" : converter(SourceChannelsSwz_Variants), display(Roughness map source channels);
			string_dat src_rgh_mod = "" : converter(SourceChannelsMod_Variants), display(Roughness map source swizzle);
			string_dat src_dye = "Dye" : converter(SourceChannels_Variants), display(Dye map source);
			string_dat src_dye_swz = "RGB" : converter(SourceChannelsSwzRGB_Variants), display(Dye map source channels);
			string_dat src_dye_mod = "" : converter(SourceChannelsMod_Variants), display(Dye map source swizzle);
			string_dat src_dyr = "Dye" : converter(SourceChannels_Variants), display(Dye roughness map source);
			string_dat src_dyr_swz = "Green" : converter(SourceChannelsSwz_Variants), display(Dye roughness map source channels);
			string_dat src_dyr_mod = "" : converter(SourceChannelsMod_Variants), display(Dye roughness map source swizzle);
			string_dat src_dya = "Dye" : converter(SourceChannels_Variants), display(Dye mask map source);
			string_dat src_dya_swz = "Green" : converter(SourceChannelsSwz_Variants), display(Dye mask map source channels);
			string_dat src_dya_mod = "" : converter(SourceChannelsMod_Variants), display(Dye mask map source swizzle);
			string_dat src_usr = "Diffuse" : converter(SourceChannels_Variants), display(User color mask source);
			string_dat src_usr_swz = "Alpha" : converter(SourceChannelsSwz_Variants), display(User color mask source channels);
			string_dat src_usr_mod = "" : converter(SourceChannelsMod_Variants), display(User color mask source swizzle);
			string_dat src_mix = "Diffuse" : converter(SourceChannels_Variants), display(Blending mask source);
			string_dat src_mix_swz = "Alpha" : converter(SourceChannelsSwz_Variants), display(Blending mask source channels);
			string_dat src_mix_mod = "" : converter(SourceChannelsMod_Variants), display(Blending mask source swizzle);
			string_dat src_vxc = "Vertex" : converter(SourceChannels_Variants), display(Vertex color source);
			string_dat src_vxc_swz = "Alpha" : converter(SourceChannelsSwzRGB_Variants), display(Vertex color source channels);
			string_dat src_vxc_mod = "" : converter(SourceChannelsMod_Variants), display(Vertex color source swizzle);
			string_dat src_vxr = "Vertex" : converter(SourceChannels_Variants), display(Vertex roughness source);
			string_dat src_vxr_swz = "Alpha" : converter(SourceChannelsSwz_Variants), display(Vertex roughness source channels);
			string_dat src_vxr_mod = "" : converter(SourceChannelsMod_Variants), display(Vertex roughness source swizzle);
			string_dat src_vxa = "Vertex" : converter(SourceChannels_Variants), display(Vertex mask source);
			string_dat src_vxa_swz = "Alpha" : converter(SourceChannelsSwz_Variants), display(Vertex mask source channels);
			string_dat src_vxa_mod = "" : converter(SourceChannelsMod_Variants), display(Vertex mask source swizzle);
			string_dat src_dt0 = "Mask" : converter(SourceChannels_Variants), display(Detail 0 mask source);
			string_dat src_dt0_swz = "Green" : converter(SourceChannelsSwz_Variants), display(Detail 0 mask source channels);
			string_dat src_dt0_mod = "One" : converter(SourceChannelsMod_Variants), display(Detail 0 mask source swizzle);
			string_dat src_dt1 = "Mask" : converter(SourceChannels_Variants), display(Detail 1 mask source);
			string_dat src_dt1_swz = "Alpha" : converter(SourceChannelsSwz_Variants), display(Detail 1 mask source channels);
			string_dat src_dt1_mod = "One" : converter(SourceChannelsMod_Variants), display(Detail 1 mask source swizzle);
			int_dat dif_0_um = -1 : display(Diffuse usermap);
			int_dat nrm_0_um = -1 : display(Normal usermap);
		}

		class Emissive
		{
			string_dat ems_1_tex = "" : editor(ImageFileNameEditor), display(Texture 1);
			string_dat ems_2_tex = "" : editor(ImageFileNameEditor), display(Texture 2);
			string_dat ems_3_tex = "" : editor(ImageFileNameEditor), display(Texture 3);
			string_dat ems_4_tex = "" : editor(ImageFileNameEditor), display(Texture 4);
			string_dat ems_5_tex = "" : editor(ImageFileNameEditor), display(Texture 5);
			string_dat ems_6_tex = "" : editor(ImageFileNameEditor), display(Texture 6);
			string_dat ems_7_tex = "" : editor(ImageFileNameEditor), display(Texture 7);
			float_dat ems_0_night_light_threshold = 0.0 : display(Emissive 0 Night Lights Threshold);
			float_dat ems_1_night_light_threshold = 0.0 : display(Emissive 1 Night Lights Threshold);
			float_dat ems_2_night_light_threshold = 0.0 : display(Emissive 2 Night Lights Threshold);
			float_dat ems_3_night_light_threshold = 0.0 : display(Emissive 3 Night Lights Threshold);
			float_dat ems_4_night_light_threshold = 0.0 : display(Emissive 4 Night Lights Threshold);
			float_dat ems_5_night_light_threshold = 0.0 : display(Emissive 5 Night Lights Threshold);
			float_dat ems_6_night_light_threshold = 0.0 : display(Emissive 6 Night Lights Threshold);
			float_dat ems_7_night_light_threshold = 0.0 : display(Emissive 7 Night Lights Threshold);
			float_dat ems_0_threshold = -1.0 : display(Emissive 0 Alpha Threshold);
			float_dat ems_1_threshold = -1.0 : display(Emissive 1 Alpha Threshold);
			float_dat ems_2_threshold = -1.0 : display(Emissive 2 Alpha Threshold);
			float_dat ems_3_threshold = -1.0 : display(Emissive 3 Alpha Threshold);
			float_dat ems_4_threshold = -1.0 : display(Emissive 4 Alpha Threshold);
			float_dat ems_5_threshold = -1.0 : display(Emissive 5 Alpha Threshold);
			float_dat ems_6_threshold = -1.0 : display(Emissive 6 Alpha Threshold);
			float_dat ems_7_threshold = -1.0 : display(Emissive 7 Alpha Threshold);
			string_dat ems_off_msk = "" : editor(ImageFileNameEditor), display(Offset mask);
			float_dat ems_off_00_factor = 0.0 : display(Offset 0 scale);
			float_dat ems_off_01_factor = 0.0 : display(Offset 1 scale);
			float_dat ems_off_02_factor = 0.0 : display(Offset 2 scale);
			float_dat ems_off_03_factor = 0.0 : display(Offset 3 scale);
			float_dat ems_off_04_factor = 0.0 : display(Offset 4 scale);
			float_dat ems_off_05_factor = 0.0 : display(Offset 5 scale);
			float_dat ems_off_06_factor = 0.0 : display(Offset 6 scale);
			float_dat ems_off_07_factor = 0.0 : display(Offset 7 scale);
			int_dat ems_off_00_tile = WRAP : converter(TexTile_Variants), display(Offset 0 Tiling);
			int_dat ems_off_01_tile = WRAP : converter(TexTile_Variants), display(Offset 1 Tiling);
			int_dat ems_off_02_tile = WRAP : converter(TexTile_Variants), display(Offset 2 Tiling);
			int_dat ems_off_03_tile = WRAP : converter(TexTile_Variants), display(Offset 3 Tiling);
			int_dat ems_off_04_tile = WRAP : converter(TexTile_Variants), display(Offset 4 Tiling);
			int_dat ems_off_05_tile = WRAP : converter(TexTile_Variants), display(Offset 5 Tiling);
			int_dat ems_off_06_tile = WRAP : converter(TexTile_Variants), display(Offset 6 Tiling);
			int_dat ems_off_07_tile = WRAP : converter(TexTile_Variants), display(Offset 7 Tiling);
			float_dat ems_off_00_scale = 1.0 : display(Offset 0 UV scale);
			float_dat ems_off_01_scale = 1.0 : display(Offset 1 UV scale);
			float_dat ems_off_02_scale = 1.0 : display(Offset 2 UV scale);
			float_dat ems_off_03_scale = 1.0 : display(Offset 3 UV scale);
			float_dat ems_off_04_scale = 1.0 : display(Offset 4 UV scale);
			float_dat ems_off_05_scale = 1.0 : display(Offset 5 UV scale);
			float_dat ems_off_06_scale = 1.0 : display(Offset 6 UV scale);
			float_dat ems_off_07_scale = 1.0 : display(Offset 7 UV scale);
			bool_dat ems_0_mesh_control_on = FALSE : display(Emissive 0 Mesh Control Enabled);
			bool_dat ems_1_mesh_control_on = FALSE : display(Emissive 1 Mesh Control Enabled);
			bool_dat ems_2_mesh_control_on = FALSE : display(Emissive 2 Mesh Control Enabled);
			bool_dat ems_3_mesh_control_on = FALSE : display(Emissive 3 Mesh Control Enabled);
			bool_dat ems_4_mesh_control_on = FALSE : display(Emissive 4 Mesh Control Enabled);
			bool_dat ems_5_mesh_control_on = FALSE : display(Emissive 5 Mesh Control Enabled);
			bool_dat ems_6_mesh_control_on = FALSE : display(Emissive 6 Mesh Control Enabled);
			bool_dat ems_7_mesh_control_on = FALSE : display(Emissive 7 Mesh Control Enabled);
			bool_dat ems_outdoor_on = FALSE : display(Emissive outdoor intensity Enabled);
			bool_dat ems_outdoor_shadows_on = TRUE : display(Emissive outdoor shadows Enabled);
			string_dat ems_src_usr = "" : converter(UserColorRGB_Variants), display(User color source);
			string_dat ems_threshold_src_usr = "" : converter(UserColor_Variants), display(Emissive Mesh Control source);
			float_dat ems_0_fade = 1.0 : display(Fade base);
			float_dat ems_1_fade = 1.0 : display(Fade 1);
			float_dat ems_2_fade = 1.0 : display(Fade 2);
			float_dat ems_3_fade = 1.0 : display(Fade 3);
			float_dat ems_4_fade = 1.0 : display(Fade 4);
			float_dat ems_5_fade = 1.0 : display(Fade 5);
			float_dat ems_6_fade = 1.0 : display(Fade 6);
			float_dat ems_7_fade = 1.0 : display(Fade 7);
		}
        class Quality and performance
        {
        	bool_dat gamma_correct_on = FALSE : display(Gamma correction Enabled);
			bool_dat nrm_smooth_on = FALSE : display(Smooth normals Enabled);
			bool_dat zpass_on = FALSE : display(Z-pass Enabled);
			int_dat cast_shadows = AUTO : converter(enabled), display(Cast Shadow Enabled);
			bool_dat nrm_flip2s_on = TRUE : display(2-sided normal flipping Enabled);

			string_dat det_allowed = "HighEnd" : converter(Allowed_Variants), display(Details allowed);
			string_dat hgt_allowed = "HighEnd" : converter(Allowed_Variants), display(Relief allowed);
			bool_dat blur_motion_object_on = TRUE : display(Object Blur Toggle - High End only);
			float_dat clip_near = 0.0 : display(Clip near);
			bool_dat tiny_object_distance_fade = FALSE : display(Tiny object distance fade enabled);
			
			bool_dat intersection_test_on = FALSE : display(Intersection test);
			
			bool_dat camera_motion_blur_reduce_on = FALSE : display(Camera Motion Blur reducing enabled);
			bool_dat player_scaling_on = FALSE : display(Player scaling enabled);
        }
		class Order
		{
			string_dat technique = "" : converter("\"opq_first\"", "\"opq_0\"", "\"opq\"", "\"opq_2\"", "\"opq_last\"", "\"opq_clr_nrm_0\"", "\"opq_clr_nrm\"", "\"opq_clr_nrm_2\"", "\"opq_nrm_0\"", "\"opq_nrm\"", "\"opq_nrm_2\"", "\"opq_clr_0\"", "\"opq_clr\"", "\"opq_clr_2\""), display(Rendering technique);
            bool_dat static_on = TRUE : display(Static geometry);
			bool_dat instancing_on = TRUE : display(Instancing enabled);
		}
		class Soft Alpha
		{
			bool_dat soft_alpha_on = FALSE : display(Soft alpha on);
			float_dat sa_radius_scale = 0.0 : display(Radius Scale);
			int_dat sa_sample_count = 1 : display(Sample count);
			string_dat sa_flowmap_tex = "" : editor(ImageFileNameEditor), display(Soft alpha flowmap);
		}
		class Facial expressions 
		{
			string_dat fe_bn_nrm = "" : editor(ImageFileNameEditor), display(Wrinkles normal map);
			string_dat fe_bn_msk_0 = "" : editor(ImageFileNameEditor), display(Wrinkles mask 0);
			string_dat fe_bn_msk_1 = "" : editor(ImageFileNameEditor), display(Wrinkles mask 1);
			string_dat fe_bn_msk_2 = "" : editor(ImageFileNameEditor), display(Wrinkles mask 2);
			string_dat fe_bn_msk_3 = "" : editor(ImageFileNameEditor), display(Wrinkles mask 3);
			vec4_dat fe_bn_msk_0_weight = vec(0.0, 0.0, 0.0, 0.0) : editor(ColorRGBEditor), display(Wrinkles mask 0 source);
			vec4_dat fe_bn_msk_1_weight = vec(0.0, 0.0, 0.0, 0.0) : editor(ColorRGBEditor), display(Wrinkles mask 1 source);
			vec4_dat fe_bn_msk_2_weight = vec(0.0, 0.0, 0.0, 0.0) : editor(ColorRGBEditor), display(Wrinkles mask 2 source);
			vec4_dat fe_bn_msk_3_weight = vec(0.0, 0.0, 0.0, 0.0) : editor(ColorRGBEditor), display(Wrinkles mask 3 source);
		}
	}
	category Tint
	{
		class Textures (Second UV)
		{
			string_dat dye_tex = "" : editor(ImageFileNameEditor), display(Dye texture);
			string_dat dye_mix = "Multiply" : converter(ColorBlend_Variants), display(Dye RGB mix mode);
			string_dat dya_mix = "Add" : converter(ColorBlend_Variants), display(Dye Roughness mix mode);
		}
		class Horizon Dye
		{
			float_dat horizon_dye_min = 0.0 : display(Horizon dye height min);
			float_dat horizon_dye_max = 10.0 : display(Horizon dye height max);
			vec3_dat horizon_dye_color = vec(1.0, 1.0, 1.0) : editor(ColorRGBEditor), display(Horizon dye color);

			string_dat horizon_dye_grad = "" : editor(ImageFileNameEditor), display(Horizon dye texture);
			bool_dat horizon_dye_wrap = FALSE : display(Horizon dye texture wrap);
		}
		class Details
		{
			string_dat det_clr_0_tex = "" : editor(ImageFileNameEditor), display(Detail 0 color texture);
			string_dat det_clr_0_mix_clr = "Multiply" : converter(ColorBlendUnmasked_Variants), display(Detail 0 RGB mix mode);
			string_dat det_clr_0_mix_rgh = "Add" : converter(ColorBlendUnmasked_Variants), display(Detail 0 Roughness mix mode);
			string_dat det_nrm_0_tex = "" : editor(ImageFileNameEditor), display(Detail 0 normal texture);
			float_dat det_nrm_0_factor = 1.0 : converter(min = 0.0, max = 1.0), display(Detail 0 normal scale);
			string_dat det_clr_1_tex = "" : editor(ImageFileNameEditor), display(Detail 1 color texture);
			string_dat det_clr_1_mix_clr = "Multiply" : converter(ColorBlendUnmasked_Variants), display(Detail 1 RGB mix mode);
			string_dat det_clr_1_mix_rgh = "Add" : converter(ColorBlendUnmasked_Variants), display(Detail 1 Roughness mix mode);
			string_dat det_nrm_1_tex = "" : editor(ImageFileNameEditor), display(Detail 1 normal texture);
			float_dat det_nrm_1_factor = 1.0 : converter(min = 0.0, max = 1.0), display(Detail 1 normal scale);
			float_dat det_uv_scale = 2.0 : display(Details UV scale);
			float_dat det_uv_aspect = 1.0 : converter(0.0625, 0.125, 0.25, 0.5, 1.0, 2.0, 4.0, 8.0, 16.0), display(Details UV aspect);
			bool_dat det_clr_0_blend_on = FALSE : display(Detail 0 color overlay blending);
		}
		class Emissive
		{
			string_dat ems_dye_tex = "" : editor(ImageFileNameEditor), display(Emissive dye texture);
			float_dat ems_dye_u_scale = 1.0 : display(Emissive dye U scale);
			float_dat ems_dye_v_scale = 1.0 : display(Emissive dye V scale);
		}
		class Instance
		{
			bool_dat usr_0_on = FALSE : display(User color 0 enabled);
			bool_dat usr_1_on = FALSE : display(User color 1 enabled);
			bool_dat usr_msk_on = FALSE : display(User mask enabled);
			bool_dat usr_alpha_on = FALSE : display(User alpha enabled);
		}
		class Mesh
		{
			string_dat vxc_mix = "None" : converter(ColorBlend_Variants), display(Vertex Color mix mode);
			string_dat vxr_mix = "None" : converter(ColorBlend_Variants), display(Vertex Roughness mix mode);
		}
		class Env
		{
			bool_dat player_rfl_on = FALSE : display(Player reflection enabled);
			float_dat player_rfl_factor = 1.0 : display(Player reflection Factor);
			float_dat player_rfl_uv_scale = 1.0 : display(Player reflection UV Scale);
		}
		class Gradient
		{
			string_dat idx_tex = "" : editor(ImageFileNameEditor), display(Index map texture);
			string_dat grd_tex = "" : editor(ImageFileNameEditor), display(Gradient texture);
			string_dat grd_map_tex = "" : editor(ImageFileNameEditor), display(Gradient map texture);
			bool_dat grd_25d_on = FALSE : display(Gradient map 2.5D Enabled);
		}
		class Gradient mip direction mask
		{
			bool_dat grd_mip_dir_on = FALSE : display(Enabled);
			vec3_dat grd_mip_dir = vec(0.0, 1.0, 0.0) : display(Direction WS);
			float_dat grd_mip_dir_min = 0.0 : display(Mask minimum);
			float_dat grd_mip_dir_max = 1.0 : display(Mask maximum);
		}
		class Gradient mip height mask
		{
			bool_dat grd_mip_hgt_on = FALSE : display(Enabled);
			float_dat grd_mip_hgt_min = 0.0 : display(Zero level);
			float_dat grd_mip_hgt_max = 1.0 : display(One level);
		}
		class Gradient mip mask params
		{
			bool_dat grd_mips_sum_on = FALSE : display(Masks addition enabled);
		}
	}
	category UV
	{
		class Sources
		{
			int_dat uv_0_src = uv_src_mesh_uv_0 : converter(uv_sources_list), display(UV 0 source);
			float_dat uv_0_scale = 1.0 : display(UV 0 scale);
		}
		class Transformation
		{
			bool_dat uv_0_xfm_on = FALSE : display(UV 0 Transformation);
			mtx_dat uv_0_xfm = scale(1.0) : display(UV 0 Transformation matrix);
			bool_dat ems_0_xform_on = FALSE : display(Emissive 0 Transformation);
			bool_dat ems_1_xform_on = FALSE : display(Emissive 1 Transformation);
			bool_dat ems_2_xform_on = FALSE : display(Emissive 2 Transformation);
			bool_dat ems_3_xform_on = FALSE : display(Emissive 3 Transformation);
			bool_dat ems_4_xform_on = FALSE : display(Emissive 4 Transformation);
			bool_dat ems_5_xform_on = FALSE : display(Emissive 5 Transformation);
			bool_dat ems_6_xform_on = FALSE : display(Emissive 6 Transformation);
			bool_dat ems_7_xform_on = FALSE : display(Emissive 7 Transformation);
			mtx_dat ems_0_xform = scale(1.0) : display(Emissive 0 Transformation matrix);
			mtx_dat ems_1_xform = scale(1.0) : display(Emissive 1 Transformation matrix);
			mtx_dat ems_2_xform = scale(1.0) : display(Emissive 2 Transformation matrix);
			mtx_dat ems_3_xform = scale(1.0) : display(Emissive 3 Transformation matrix);
			mtx_dat ems_4_xform = scale(1.0) : display(Emissive 4 Transformation matrix);
			mtx_dat ems_5_xform = scale(1.0) : display(Emissive 5 Transformation matrix);
			mtx_dat ems_6_xform = scale(1.0) : display(Emissive 6 Transformation matrix);
			mtx_dat ems_7_xform = scale(1.0) : display(Emissive 7 Transformation matrix);
		}
		class Parallax
		{
			string_dat hgt_0_tex = "" : editor(ImageFileNameEditor), display(Height texture);
			string_dat hgt = "Parallax" : converter(Parallax_Variants), display(Parallax technique);			
			float_dat parallax_scale = 0.0 : display(Parallax scale);
			float_dat parallax_mip = 0.0 : display(Parallax mipmap);
			int_dat linear_search_steps = 5 : display(Relief linear search steps);
			int_dat binary_search_steps = 3 : display(Relief binary search steps);
			float_dat relief_linear_mip = 0.0 : display(Relief linear search mipmap);
			float_dat relief_binary_mip = 0.0 : display(Relief binary search mipmap);
		}
		class Offset
		{
			string_dat off_0_tex = "" : editor(ImageFileNameEditor), display(Offset mask);
			string_dat clr_01_tex = "" : editor(ImageFileNameEditor), display(Offset 1 color texture);
			string_dat clr_02_tex = "" : editor(ImageFileNameEditor), display(Offset 2 color texture);
			string_dat clr_03_tex = "" : editor(ImageFileNameEditor), display(Offset 3 color texture);
			string_dat clr_04_tex = "" : editor(ImageFileNameEditor), display(Offset 4 color texture);
			string_dat clr_bk_tex = "" : editor(ImageFileNameEditor), display(Background color texture);
			float_dat clr_01_factor = 0.0 : display(Offset 1 scale);
			float_dat clr_02_factor = 0.0 : display(Offset 2 scale);
			float_dat clr_03_factor = 0.0 : display(Offset 3 scale);
			float_dat clr_04_factor = 0.0 : display(Offset 4 scale);
			int_dat clr_01_tile = WRAP : converter(TexTile_Variants), display(Offset 1 Tiling);
			int_dat clr_02_tile = WRAP : converter(TexTile_Variants), display(Offset 2 Tiling);
			int_dat clr_03_tile = WRAP : converter(TexTile_Variants), display(Offset 3 Tiling);
			int_dat clr_04_tile = WRAP : converter(TexTile_Variants), display(Offset 4 Tiling);
			float_dat clr_01_scale = 1.0 : display(Offset 1 UV scale);
			float_dat clr_02_scale = 1.0 : display(Offset 2 UV scale);
			float_dat clr_03_scale = 1.0 : display(Offset 3 UV scale);
			float_dat clr_04_scale = 1.0 : display(Offset 4 UV scale);
		}
	}

	category Geometry
	{
        class Transformations
        {
            bool_dat vertex_deform_on = false : display(Vertex deformation enabled);
            mtx_dat mtx_vertex_deform = scale(1.0) : display(Vertex deformation matrix);
            string_dat __vertex_deform_msk = __none : display(Vertex deformation mask), converter(VertexDeform_Variants);

			bool_dat vertex_deform_on_1 = false : display(Vertex deformation 1 enabled);
            mtx_dat mtx_vertex_deform_1 = scale(1.0) : display(Vertex deformation 1 matrix);
            string_dat __vertex_deform_msk_1 = __none : display(Vertex deformation 1 mask), converter(VertexDeform_Variants);

			bool_dat vertex_deform_on_2 = false : display(Vertex deformation 2 enabled);
            mtx_dat mtx_vertex_deform_2 = scale(1.0) : display(Vertex deformation 2 matrix);
            string_dat __vertex_deform_msk_2 = __none : display(Vertex deformation 2 mask), converter(VertexDeform_Variants);

			bool_dat vertex_deform_on_3 = false : display(Vertex deformation 3 enabled);
            mtx_dat mtx_vertex_deform_3 = scale(1.0) : display(Vertex deformation 3 matrix);
            string_dat __vertex_deform_msk_3 = __none : display(Vertex deformation 3 mask), converter(VertexDeform_Variants);

			bool_dat rotate_to_camera_on = false : display(Rotate to camera);
			bool_dat multiple_pivots = false : display(multiple_pivots);
        }
		class Culling
		{
			int_dat culling = CULL_DEF : converter(StandardCullMode_Variants), display(Culling);
		}
		class Tessellation (High End only)
		{
			bool_dat tessellation_on = FALSE : display(Tessellation);
			int_dat tess_partitioning = tess_integer_pow2 : converter(tess_partitioning_list), display(Partitioning);
			float_dat tess_edge = 100.0 : display(Pixel Per Edge);
			float_dat tess_edge_min = 1.0 : converter(min = 1.0, max = 64.0), display(Tessellation factor min);
			float_dat tess_edge_max = 16.0 : converter(min = 1.0, max = 64.0), display(Tessellation factor max);
			float_dat tess_face_cull = 0.25 : converter(min = 0.0, max = 1.0), display(Tessellation face cull);
			bool_dat tess_smooth_on = FALSE : display(PN-Triangles);
			bool_dat tess_dir_adaptive_on = FALSE : display(Orientation Adaptive);
		}
		class Displacement (High End only)
		{
			string_dat dsp_tex = "" : editor(ImageFileNameEditor), display(Displacement tex);
			float_dat dsp_scale = 0.0 : display(Displacement scale);
			float_dat dsp_bias = 0.0 : display(Displacement bias);
			bool_dat dsp_vector_on = FALSE : display(Vector displacement);
		}
		class Morphing
		{
			float_dat fake_morph_factor = 0.0 : display(Morphing Factor);
			float_dat fake_morph_time_factor = 0.3 : display(Morphing Time Factor);
			float_dat fake_morph_pos_factor = 0.3 : display(Morphing Position Factor);
			bool_dat fake_morph_4 = FALSE : display(4 state enabled );
			float_dat fake_morph_4_distance = 128.0 : display(4 state max distance);
			float_dat fake_morph_4_blend_factor = 0.5 : display(4 state linear transform blend);
			float_dat fake_morph_4_f_factor_0 = 4.0 : display(4 state *pi );
			float_dat fake_morph_4_f_factor_1 = 0.0 : display(4 state +pi/2 );
			bool_dat fake_morph_4_usrclr_conrtol = TRUE : display(4 state color conrtol);
		}
		class Vs displace
		{
			string_dat vs_displace_tex = "" : editor(ImageFileNameEditor), display(displace tex);
			float_dat vs_displace_factor = 0.0 : display(displace factor );
			bool_dat vs_displace_vector_map = TRUE : display(displace vector map);
			
			string_dat vs_displace_uv = "UV_0" : converter(VS_Uv), display(displace vector uv source);		
		}
	}
	category Blending
	{
		class Modes
		{
			string_dat blend_mode_rgb = "Opaque" : converter(RTBlend_Variants), display(RGB/XYZ blending mode);
			string_dat blend_mode_a = "Opaque" : converter(RTBlend_Variants), display(Alpha/W blending mode);
			bool_dat blend_0_on = TRUE : display(Color/Roughness Buffer Blending Allowed);
			bool_dat blend_1_on = TRUE : display(Normal/Material ID Buffer Blending Allowed);
		}
		class Write Masks
		{
			bool_dat out_0_on = TRUE : display(Color/Roughness Write Enabled);
			bool_dat out_0_x_on = TRUE : display(Color Red Write Enabled);
			bool_dat out_0_y_on = TRUE : display(Color Green Write Enabled);
			bool_dat out_0_z_on = TRUE : display(Color Blue Write Enabled);
			bool_dat out_0_w_on = TRUE : display(Roughness Write Enabled);
			bool_dat out_1_on = TRUE : display(Normal/Material ID Write Enabled);
			bool_dat out_1_x_on = TRUE : display(Normal X Write Enabled);
			bool_dat out_1_y_on = TRUE : display(Normal Y Write Enabled);
			bool_dat out_1_z_on = TRUE : display(Normal Z Write Enabled);
			bool_dat out_1_w_on = TRUE : display(Material ID Write Enabled);
			int_dat dpt_write = AUTO : converter(enabled), display(Depth Write Mode);
		}

	}
	category Wind
	{
		class Wind
		{
			bool_dat wind_global_on = FALSE : display(Wind ON);
			bool_dat wind_mask_uv_source = FALSE : display(Wind mask uv source);
			float_dat f_wind_noise_factor = 0.3 : editor(FloatSpinEditor), display(Wind Noise Factor);
			float_dat f_wind_noise_scale = 1.0 : editor(FloatSpinEditor), display(Wind Noise Scale);
			float_dat f_wind_time_scale = 1.0 : editor(FloatSpinEditor), display(Wind Noise Time Scale);
			float_dat f_wind_gravity_factor = 0.0 : editor(FloatSpinEditor), display(Gravity Factor);
			float_dat f_normal_blend = 1.0 : editor(FloatSpinEditor), display(Normal/Noise Blend);
			float_dat f_wind_dir_factor = 0.3 : editor(FloatSpinEditor), display(Wind Direct Factor);
			float_dat f_wind_dir_factor_max = -1.0 : editor(FloatSpinEditor), display(Wind max ....);
			float_dat f_wind_direct_time = 0.0 : editor(FloatSpinEditor), display(Time Direct Scale);
			float_dat f_wind_phase_delay = 1.0 : editor(FloatSpinEditor), display(Phase Delay);
		}

		class Wind Weave
		{
			string_dat wind_weave_msk = "" : editor(ImageFileNameEditor), display(Wind Weave Mask);
			string_dat wind_weave_tex = "" : editor(ImageFileNameEditor), display(Wind Weave Texture);
			float_dat f_wind_weave_factor = 0.3 : editor(FloatSpinEditor), display(Weave Noise Factor );
			float_dat f_wind_weave_distor = 1.0 : editor(FloatSpinEditor), display(Weave Diffuse Deformation);
			float_dat f_wind_weave_uv_scale = 1.0 : editor(FloatSpinEditor), display(Weave UV Scale);
			float_dat f_wind_weave_uv_speed = 3.0 : editor(FloatSpinEditor), display(Weave UV speed);
			float_dat f_wind_weave_nrm_scale = 0.3 : editor(FloatSpinEditor), display(Weave Normal Scale);
		}

		class Wind Pivots
		{
			bool_dat wind_pivot1_on = FALSE : display(Pivot 1 On);
			vec3_dat wind_pivot1_pos = vec(0.0, 0.0, 0.0) : editor(ColorRGBEditor), display(Pivot 1 Center Position);
			vec3_dat wind_pivot1_axis = vec(1.0, 0.0, 0.0) : editor(ColorRGBEditor), display(Pivot 1 Axis);
			bool_dat wind_pivot3_on = FALSE : display(Pivot 3 On);
			float_dat wind_pivot3_factor = 0.2 : editor(FloatSpinEditor), display(Pivot 3 Factor);
			bool_dat wind_pivot3_pow = FALSE : display(Pivot 3 pow On);
			vec3_dat wind_pivot3_pos = vec(0.0, 0.0, 0.0) : editor(ColorRGBEditor), display(Pivot 3 Position);
			bool_dat wind_pivot3_saturate = FALSE : display(Pivot 3 Saturate);
		}
		class Wind Flag
		{
			bool_dat b_flag_animation = FALSE : display(Flag Animation);
			float_dat f_flag_speed_factor = 20.0 : display(Speed);
			float_dat f_flag_dist_size = 1.0 : display(Scale);
			float_dat f_flag_dist_factor = 0.6 : display(Distorsion);
			float_dat f_flag_dir_factor = 1.0 : display(Direction factor);
			string_dat flag_nrm_tex = "" : editor(ImageFileNameEditor), display(Normal);
			float_dat f_flag_nrm_scale = 1.0 : editor(FloatSpinEditor), display(Normal Scale);
			float_dat f_flag_time_factor = 1.0 : editor(FloatSpinEditor), display(Normal time factor);
			float_dat f_flag_uv_factor = 0.1 : editor(FloatSpinEditor), display(Normal UV factor);
			bool_dat b_flag_dir_ms = FALSE : display(Wind direction model space);
			vec3_dat v_flag_dir_vec = vec(1.0, 0.0, 0.0) : editor(ColorRGBEditor), display(Wind direction model space);
		}
		class Wind Leaves
		{
			bool_dat b_wind_noise_0_on = FALSE : display(Wind Noise 0 );
			float_dat f_wind_0_factor = 0.5 : display(Wind Noise 0 factor );
			float_dat f_object_h = 10.0 : display(Object height );
			bool_dat b_wind_noise_1_on = FALSE : display(Wind Noise 1 );
			float_dat f_wind_1_factor = 0.3 : display(Wind Noise 1 factor );
			float_dat f_wind_1_scale = 0.2 : display(Wind Noise 1 scale );
			float_dat f_wind_1_time = 0.2 : display(Wind Noise 1 time factor );
			float_dat f_wind_msk_h = 3.0 :  display(Wind Noise 1 pivot height );
			bool_dat b_wind_noise_2_on = FALSE : display(Wind Noise 2 );
			float_dat f_wind_2_factor = 0.1: display(Wind Noise 2 factor );
			float_dat f_wind_2_m_factor = 5.0: display(Wind Noise 2 displace factor );
			float_dat f_wind_2_scale = 50.0: display(Wind Noise 2 scale );
			float_dat f_wind_2_time = 1.0: display(Wind Noise 2 time factor);
		}
		class Wind Omni Saturate
		{
			float_dat f_wind_omni_saturate = 1.1: display(Wind Omni Saturate);

		}
	}
	category Game
	{
		class Damage
		{
			string_dat damage_tex = "" : editor(ImageFileNameEditor), display(Damage masks texture);
			int_dat damage_uv_src = uv_src_mesh_uv_0 : converter(uv_sources_list_2), display(Damage masks UV source);
			float_dat damage_uv_scale = 1.0 : display(Damage masks UV tiling);
			bool_dat blood_on = FALSE : display(Blood enabled);
			bool_dat blood_factor_on = FALSE : display(Blood user control enabled);
			bool_dat carbon_on = FALSE : display(Carbonization enabled);
			bool_dat carbon_factor_on = FALSE : display(Carbonization user control enabled);
			string_dat cutting_tex = "blood_noise_msk.dds" : editor(ImageFileNameEditor), display(Cutting mask texture);
			int_dat cutting_uv_src = uv_src_mesh_uv_0 : converter(uv_sources_list_2), display(Cutting mask UV source);
			float_dat cutting_uv_scale = 1.0 : display(Cutting mask UV tiling);
			bool_dat cutting_on = FALSE : display(Cutting enabled);
			bool_dat variant_acid_on = FALSE : display(Toxic and Frozen user control enabled);
		}
		class Highlight
		{
			bool_dat highlight_on = FALSE : display(Highlight enabled);
			bool_dat ghost_on = FALSE : display(Ghost enabled);
			bool_dat highlight_enemy_on = FALSE : display(Highlight Enemy enabled);
			bool_dat loot_render_on = FALSE : display(Loot enabled);
		}
		class Ice
		{
			bool_dat ice_on = FALSE : display(Ice enabled);
			float_dat ice_uv_tile = 2.0 : display(Ice UV tiling);
			string_dat ice_tex = "ice_msk.dds" : editor(ImageFileNameEditor), display(Ice texture);
			string_dat ice_nrm = "ice_nrm.dds" : editor(ImageFileNameEditor), display(Ice normal texture);
			vec3_dat ice_color = vec(0.7 , 0.8 ,0.9) : editor(ColorRGBEditor), display(Ice color);
		}
		class Dissolve
		{
			bool_dat breaking_on = FALSE : display(Dissolve enabled);
			bool_dat player_dissolve_on = FALSE : display(Player Dissolve Enabled);
			string_dat breaking_tex = "" : editor(ImageFileNameEditor), display(Dissolve texture);
			float_dat breaking_uv_scale = 5.0 : display(Dissolve UV tiling);
			bool_dat breaking_debug = FALSE : display(Dissolve debug);
		}
		
		class Roughness
		{
			bool_dat roughness_control_on = FALSE : display(Roughness user control enabled);
			string_dat roughness_control_channel = "usr_1.y" : converter(Channel_Variants), display(Roughness user control channel);
		}

	}
	

	templatebody()
	{
		att_standard in_params = new att_standard();
		
		if((b_no_wind)|(ice_on))
		{
			wind_weave_tex = "" ;
			wind_pivot1_on = FALSE;
			wind_pivot3_on= FALSE;
			wind_global_on= FALSE;
			b_flag_animation= FALSE;
			b_wind_noise_0_on= FALSE;
			b_wind_noise_1_on= FALSE;
			b_wind_noise_2_on= FALSE;
		}

		in_params.src_dif = src_dif;
		in_params.src_spc = src_spc;
		in_params.src_mat = src_mat;
		in_params.src_rgh = src_rgh;
		in_params.src_dye = src_dye;
		in_params.src_dya = src_dya;
		in_params.src_dyr = src_dyr;
		in_params.src_usr = src_usr;
		in_params.src_mix = src_mix;
		in_params.src_vxc = src_vxc;
		in_params.src_vxr = src_vxr;
		in_params.src_vxa = src_vxa;
		in_params.src_dt0 = src_dt0;
		in_params.src_dt1 = src_dt1;
		in_params.src_dif_swz = src_dif_swz;
		in_params.src_spc_swz = src_spc_swz;
		in_params.src_mat_swz = src_mat_swz;
		in_params.src_rgh_swz = src_rgh_swz;
		in_params.src_dye_swz = src_dye_swz;
		in_params.src_dya_swz = src_dya_swz;
		in_params.src_dyr_swz = src_dyr_swz;
		in_params.src_usr_swz = src_usr_swz;
		in_params.src_mix_swz = src_mix_swz;
		in_params.src_vxc_swz = src_vxc_swz;
		in_params.src_vxr_swz = src_vxr_swz;
		in_params.src_vxa_swz = src_vxa_swz;
		in_params.src_dt0_swz = src_dt0_swz;
		in_params.src_dt1_swz = src_dt1_swz;
		in_params.src_dif_mod = src_dif_mod;
		in_params.src_spc_mod = src_spc_mod;
		in_params.src_mat_mod = src_mat_mod;
		in_params.src_rgh_mod = src_rgh_mod;
		in_params.src_dye_mod = src_dye_mod;
		in_params.src_dya_mod = src_dya_mod;
		in_params.src_dyr_mod = src_dyr_mod;
		in_params.src_usr_mod = src_usr_mod;
		in_params.src_mix_mod = src_mix_mod;
		in_params.src_vxc_mod = src_vxc_mod;
		in_params.src_vxr_mod = src_vxr_mod;
		in_params.src_vxa_mod = src_vxa_mod;
		in_params.src_dt0_mod = src_dt0_mod;
		in_params.src_dt1_mod = src_dt1_mod;
		in_params.dif_0_tex = dif_0_tex;
		in_params.nrm_0_tex = nrm_0_tex;
		in_params.nrm_0_factor = nrm_0_factor;
		in_params.rgh_0_min = (((float_dat)rgh_0_min) / 255.0);
		in_params.rgh_0_max = (((float_dat)rgh_0_max) / 255.0);
		in_params.msk_0_tex = msk_0_tex;
		in_params.uv_0_xfm_on = uv_0_xfm_on;
		in_params.uv_0_xfm = uv_0_xfm;
		in_params.uv_0_src = uv_0_src;
		in_params.ems_0_xform_on = ems_0_xform_on;
		in_params.ems_1_xform_on = ems_1_xform_on;
		in_params.ems_2_xform_on = ems_2_xform_on;
		in_params.ems_3_xform_on = ems_3_xform_on;
		in_params.ems_4_xform_on = ems_4_xform_on;
		in_params.ems_5_xform_on = ems_5_xform_on;
		in_params.ems_6_xform_on = ems_6_xform_on;
		in_params.ems_7_xform_on = ems_7_xform_on;
		in_params.ems_0_xform = ems_0_xform;
		in_params.ems_1_xform = ems_1_xform;
		in_params.ems_2_xform = ems_2_xform;
		in_params.ems_3_xform = ems_3_xform;
		in_params.ems_4_xform = ems_4_xform;
		in_params.ems_5_xform = ems_5_xform;
		in_params.ems_6_xform = ems_6_xform;
		in_params.ems_7_xform = ems_7_xform;
		in_params.tex_tile = tex_tile;
		in_params.filter_clr = filter_clr;
		in_params.dye_tex = dye_tex;
		in_params.dye_mix = dye_mix;
		in_params.dya_mix = dya_mix;
		in_params.vxc_mix = vxc_mix;
		in_params.vxr_mix = vxr_mix;
		in_params.mid_0 = mid_0;
		in_params.mid_1 = mid_1;
		in_params.mid_2 = mid_2;
		in_params.mid_0_threshold = (((float_dat)mid_0_threshold) / 255.0);
		in_params.mid_1_threshold = (((float_dat)mid_1_threshold) / 255.0);
		in_params.idx_tex = idx_tex;
		in_params.grd_tex = grd_tex;
		in_params.grd_map_tex = grd_map_tex;
		in_params.grd_25d_on = grd_25d_on;
		in_params.grd_mip_dir_on = grd_mip_dir_on;
		in_params.grd_mip_dir = grd_mip_dir;
		in_params.grd_mip_dir_min = grd_mip_dir_min;
		in_params.grd_mip_dir_max = grd_mip_dir_max;
		in_params.grd_mip_hgt_on = grd_mip_hgt_on;
		in_params.grd_mip_hgt_min = grd_mip_hgt_min;
		in_params.grd_mip_hgt_max = grd_mip_hgt_max;
		in_params.grd_mips_sum_on = grd_mips_sum_on;
		in_params.usr_0_on = usr_0_on;
		in_params.usr_1_on = usr_1_on;
		in_params.usr_alpha_on = usr_alpha_on;
		in_params.usr_msk_on = usr_msk_on;
		in_params.ems_clr = ems_clr;
		in_params.highlight_on = highlight_on | b_hl | ghost_on | b_gh;
		in_params.ghost_on = ghost_on | b_gh;
		in_params.highlight_enemy_on = highlight_enemy_on;
		in_params.off_0_tex = off_0_tex;
		in_params.clr_01_tex = clr_01_tex;
		in_params.clr_02_tex = clr_02_tex;
		in_params.clr_03_tex = clr_03_tex;
		in_params.clr_04_tex = clr_04_tex;
		in_params.clr_bk_tex = clr_bk_tex;
		in_params.clr_01_factor = clr_01_factor;
		in_params.clr_02_factor = clr_02_factor;
		in_params.clr_03_factor = clr_03_factor;
		in_params.clr_04_factor = clr_04_factor;
		in_params.clr_01_tile = clr_01_tile;
		in_params.clr_02_tile = clr_02_tile;
		in_params.clr_03_tile = clr_03_tile;
		in_params.clr_04_tile = clr_04_tile;
		in_params.clr_01_scale = clr_01_scale;
		in_params.clr_02_scale = clr_02_scale;
		in_params.clr_03_scale = clr_03_scale;
		in_params.clr_04_scale = clr_04_scale;
		in_params.det_clr_0_tex = det_clr_0_tex;
		in_params.det_nrm_0_tex = det_nrm_0_tex;
		in_params.det_nrm_0_factor = det_nrm_0_factor;
		in_params.det_clr_1_tex = det_clr_1_tex;
		in_params.det_nrm_1_tex = det_nrm_1_tex;
		in_params.det_nrm_1_factor = det_nrm_1_factor;
		in_params.det_clr_0_mix_clr = det_clr_0_mix_clr;
		in_params.det_clr_0_mix_rgh = det_clr_0_mix_rgh;
		in_params.det_clr_1_mix_clr = det_clr_1_mix_clr;
		in_params.det_clr_1_mix_rgh = det_clr_1_mix_rgh;
		in_params.det_uv_scale = det_uv_scale;
		in_params.det_uv_aspect = det_uv_aspect;
		in_params.uv_0_scale = uv_0_scale;
		in_params.det_clr_0_blend_on = det_clr_0_blend_on;
		in_params.ems_0_tex = ems_0_tex;
		in_params.ems_1_tex = ems_1_tex;
		in_params.ems_2_tex = ems_2_tex;
		in_params.ems_3_tex = ems_3_tex;
		in_params.ems_4_tex = ems_4_tex;
		in_params.ems_5_tex = ems_5_tex;
		in_params.ems_6_tex = ems_6_tex;
		in_params.ems_7_tex = ems_7_tex;
		in_params.ems_dye_tex = ems_dye_tex;
		in_params.ems_dye_u_scale = ems_dye_u_scale;
		in_params.ems_dye_v_scale = ems_dye_v_scale;
		in_params.ems_0_fade = ems_0_fade;
		in_params.ems_1_fade = ems_1_fade;
		in_params.ems_2_fade = ems_2_fade;
		in_params.ems_3_fade = ems_3_fade;
		in_params.ems_4_fade = ems_4_fade;
		in_params.ems_5_fade = ems_5_fade;
		in_params.ems_6_fade = ems_6_fade;
		in_params.ems_7_fade = ems_7_fade;
		in_params.ems_0_night_light_threshold = ems_0_night_light_threshold;
		in_params.ems_1_night_light_threshold = ems_1_night_light_threshold;
		in_params.ems_2_night_light_threshold = ems_2_night_light_threshold;
		in_params.ems_3_night_light_threshold = ems_3_night_light_threshold;
		in_params.ems_4_night_light_threshold = ems_4_night_light_threshold;
		in_params.ems_5_night_light_threshold = ems_5_night_light_threshold;
		in_params.ems_6_night_light_threshold = ems_6_night_light_threshold;
		in_params.ems_7_night_light_threshold = ems_7_night_light_threshold;
		in_params.ems_0_threshold = ems_0_threshold;
		in_params.ems_1_threshold = ems_1_threshold;
		in_params.ems_2_threshold = ems_2_threshold;
		in_params.ems_3_threshold = ems_3_threshold;
		in_params.ems_4_threshold = ems_4_threshold;
		in_params.ems_5_threshold = ems_5_threshold;
		in_params.ems_6_threshold = ems_6_threshold;
		in_params.ems_7_threshold = ems_7_threshold;
		in_params.ems_0_mesh_control_on = ems_0_mesh_control_on;
		in_params.ems_1_mesh_control_on = ems_1_mesh_control_on;
		in_params.ems_2_mesh_control_on = ems_2_mesh_control_on;
		in_params.ems_3_mesh_control_on = ems_3_mesh_control_on;
		in_params.ems_4_mesh_control_on = ems_4_mesh_control_on;
		in_params.ems_5_mesh_control_on = ems_5_mesh_control_on;
		in_params.ems_6_mesh_control_on = ems_6_mesh_control_on;
		in_params.ems_7_mesh_control_on = ems_7_mesh_control_on;
		
		in_params.ems_off_msk = ems_off_msk;
		in_params.ems_off_00_factor = ems_off_00_factor;
		in_params.ems_off_01_factor = ems_off_01_factor;
		in_params.ems_off_02_factor = ems_off_02_factor;
		in_params.ems_off_03_factor = ems_off_03_factor;
		in_params.ems_off_04_factor = ems_off_04_factor;
		in_params.ems_off_05_factor = ems_off_05_factor;
		in_params.ems_off_06_factor = ems_off_06_factor;
		in_params.ems_off_07_factor = ems_off_07_factor;
		in_params.ems_off_00_tile = ems_off_00_tile;
		in_params.ems_off_01_tile = ems_off_01_tile;
		in_params.ems_off_02_tile = ems_off_02_tile;
		in_params.ems_off_03_tile = ems_off_03_tile;
		in_params.ems_off_04_tile = ems_off_04_tile;
		in_params.ems_off_05_tile = ems_off_05_tile;
		in_params.ems_off_06_tile = ems_off_06_tile;
		in_params.ems_off_07_tile = ems_off_07_tile;
		in_params.ems_off_00_scale = ems_off_00_scale;
		in_params.ems_off_01_scale = ems_off_01_scale;
		in_params.ems_off_02_scale = ems_off_02_scale;
		in_params.ems_off_03_scale = ems_off_03_scale;
		in_params.ems_off_04_scale = ems_off_04_scale;
		in_params.ems_off_05_scale = ems_off_05_scale;
		in_params.ems_off_06_scale = ems_off_06_scale;
		in_params.ems_off_07_scale = ems_off_07_scale;
		
		in_params.ems_outdoor_on = ems_outdoor_on;
		in_params.ems_outdoor_shadows_on = ems_outdoor_shadows_on;
		in_params.ems_src_usr = ems_src_usr;
		in_params.ems_threshold_src_usr = ems_threshold_src_usr;
		in_params.spc_0_tex = spc_0_tex;
		in_params.spc_0_factor = (((float_dat)spc_0_factor) / 255.0);
		in_params.spc_1_factor = (((float_dat)spc_1_factor) / 255.0);
		in_params.spc_2_factor = (((float_dat)spc_2_factor) / 255.0);
		in_params.hgt_0_tex = hgt_0_tex;
		in_params.hgt = hgt;
		in_params.parallax_scale = parallax_scale;
		in_params.relief_linear_steps = linear_search_steps;
		in_params.relief_binary_steps = binary_search_steps;
		in_params.culling = culling;
		in_params.parallax_mip = parallax_mip;
		in_params.relief_linear_mip = relief_linear_mip;
		in_params.relief_binary_mip = relief_binary_mip;
        in_params.gamma_correct_on = gamma_correct_on;
		in_params.nrm_smooth_on = nrm_smooth_on;
		in_params.technique = technique;
        in_params.static_on = static_on;
		in_params.instancing_on = instancing_on;
        in_params.rotate_to_camera_on = rotate_to_camera_on;
        in_params.multiple_pivots = multiple_pivots;

        in_params.vertex_deform_on = vertex_deform_on;
		in_params.vertex_deform_on_1 = vertex_deform_on_1;
		in_params.vertex_deform_on_2 = vertex_deform_on_2;
		in_params.vertex_deform_on_3 = vertex_deform_on_3;

        in_params.mtx_vertex_deform = mtx_vertex_deform;
		in_params.mtx_vertex_deform_1 = mtx_vertex_deform_1;
		in_params.mtx_vertex_deform_2 = mtx_vertex_deform_2;
		in_params.mtx_vertex_deform_3 = mtx_vertex_deform_3;

        in_params.__vertex_deform_msk = __vertex_deform_msk;
		in_params.__vertex_deform_msk_1 = __vertex_deform_msk_1;
		in_params.__vertex_deform_msk_2 = __vertex_deform_msk_2;
		in_params.__vertex_deform_msk_3 = __vertex_deform_msk_3;

		in_params.horizon_dye_min  = horizon_dye_min;
		in_params.horizon_dye_max = horizon_dye_max;
		in_params.horizon_dye_color = horizon_dye_color;
		in_params.horizon_dye_grad = horizon_dye_grad;
		in_params.horizon_dye_wrap = horizon_dye_wrap;
		in_params.cast_shadows = cast_shadows;
		in_params.zpass_on = zpass_on;
		in_params.dpt_write = dpt_write;
		in_params.nrm_flip2s_on = nrm_flip2s_on;

		in_params.wind_global_on = wind_global_on;
		in_params.f_wind_omni_saturate = f_wind_omni_saturate;
		in_params.wind_mask_uv_source = wind_mask_uv_source;
		in_params.f_wind_noise_factor = f_wind_noise_factor;
		in_params.f_wind_noise_scale = f_wind_noise_scale;
		in_params.f_wind_time_scale = f_wind_time_scale;
		in_params.f_wind_gravity_factor = f_wind_gravity_factor;
		in_params.f_normal_blend = f_normal_blend;
		in_params.f_wind_dir_factor = f_wind_dir_factor;
		in_params.f_wind_dir_factor_max = f_wind_dir_factor_max;
		in_params.f_wind_direct_time = f_wind_direct_time;
		in_params.wind_weave_tex = wind_weave_tex;
		in_params.wind_weave_msk = wind_weave_msk;
		in_params.f_wind_weave_factor = f_wind_weave_factor;
		in_params.f_wind_weave_distor = f_wind_weave_distor;
		in_params.f_wind_weave_uv_scale = f_wind_weave_uv_scale;
		in_params.f_wind_weave_uv_speed = f_wind_weave_uv_speed;
		in_params.f_wind_weave_nrm_scale = f_wind_weave_nrm_scale;
		in_params.wind_pivot1_on = wind_pivot1_on;
		in_params.wind_pivot1_pos = wind_pivot1_pos;
		in_params.wind_pivot1_axis = wind_pivot1_axis;
		in_params.wind_pivot3_on = wind_pivot3_on;
		in_params.wind_pivot3_pow= wind_pivot3_pow;
		in_params.wind_pivot3_saturate= wind_pivot3_saturate;
		in_params.wind_pivot3_factor = wind_pivot3_factor;
		in_params.wind_pivot3_pos = wind_pivot3_pos;
		in_params.f_wind_phase_delay = f_wind_phase_delay;

		in_params.b_flag_animation = b_flag_animation;
		in_params.f_flag_speed_factor =f_flag_speed_factor;
		in_params.f_flag_dist_size = f_flag_dist_size;
		in_params.f_flag_dist_factor = f_flag_dist_factor;
		in_params.f_flag_dir_factor =f_flag_dir_factor;
		in_params.flag_nrm_tex =flag_nrm_tex;
		in_params.f_flag_nrm_scale = f_flag_nrm_scale;
		in_params.f_flag_time_factor =f_flag_time_factor;
		in_params.f_flag_uv_factor = f_flag_uv_factor;
		in_params.b_flag_dir_ms = b_flag_dir_ms;
		in_params.v_flag_dir_vec = v_flag_dir_vec;

		in_params.b_wind_noise_0_on = b_wind_noise_0_on;
		in_params.f_wind_0_factor = f_wind_0_factor;
		in_params.f_object_h = f_object_h;
		in_params.b_wind_noise_1_on = b_wind_noise_1_on;
		in_params.f_wind_1_factor = f_wind_1_factor;
		in_params.f_wind_1_scale = f_wind_1_scale;
		in_params.f_wind_1_time = f_wind_1_time;
		in_params.f_wind_msk_h = f_wind_msk_h;
		in_params.b_wind_noise_2_on = b_wind_noise_2_on;
		in_params.f_wind_2_factor = f_wind_2_factor;
		in_params.f_wind_2_m_factor = f_wind_2_m_factor;
		in_params.f_wind_2_scale = f_wind_2_scale;
		in_params.f_wind_2_time = f_wind_2_time;

		in_params.player_rfl_on = player_rfl_on;
		in_params.player_rfl_factor = player_rfl_factor;
		in_params.player_rfl_uv_scale = player_rfl_uv_scale;

		in_params.tess_edge = If(tessellation_on, tess_edge, 0.0);
		in_params.tess_partitioning = tess_partitioning;
		in_params.tess_edge_min = tess_edge_min;
		in_params.tess_edge_max = tess_edge_max;
		in_params.tess_face_cull = tess_face_cull;
		in_params.tess_smooth_on = tess_smooth_on;
		in_params.tess_dir_adaptive_on = tess_dir_adaptive_on;
		in_params.dsp_tex = dsp_tex;
		in_params.dsp_scale = dsp_scale;
		in_params.dsp_bias = dsp_bias;
		in_params.dsp_vector_on = dsp_vector_on;

		in_params.blur_motion_object_on = blur_motion_object_on;
		in_params.tiny_object_distance_fade = tiny_object_distance_fade;
		in_params.camera_motion_blur_reduce_on = camera_motion_blur_reduce_on;
		in_params.player_scaling_on = player_scaling_on;
		in_params.clip_near = clip_near;

		in_params.intersection_test_on = intersection_test_on;

		in_params.blend_mode_rgb = blend_mode_rgb;
		in_params.blend_mode_a = blend_mode_a;
		in_params.blend_0_on = blend_0_on;
		in_params.blend_1_on = blend_1_on;

		in_params.out_0_x_on = out_0_x_on & out_0_on;
		in_params.out_0_y_on = out_0_y_on & out_0_on;
		in_params.out_0_z_on = out_0_z_on & out_0_on;
		in_params.out_0_w_on = out_0_w_on & out_0_on;
		in_params.out_1_x_on = out_1_x_on & out_1_on;
		in_params.out_1_y_on = out_1_y_on & out_1_on;
		in_params.out_1_z_on = out_1_z_on & out_1_on;
		in_params.out_1_w_on = out_1_w_on & out_1_on;

		in_params.det_allowed = det_allowed;
		in_params.hgt_allowed = hgt_allowed;
		in_params.skn_tex = skn_tex;
		in_params.variant_acid_on = variant_acid_on;

		in_params.fake_morph_factor = fake_morph_factor;
		in_params.fake_morph_time_factor = fake_morph_time_factor;
		in_params.fake_morph_pos_factor = fake_morph_pos_factor;
		in_params.fake_morph_4_distance = fake_morph_4_distance;
		in_params.fake_morph_4 = fake_morph_4;
		in_params.fake_morph_4_f_factor_0 = fake_morph_4_f_factor_0;
		in_params.fake_morph_4_f_factor_1 = fake_morph_4_f_factor_1;
		in_params.fake_morph_4_blend_factor = fake_morph_4_blend_factor;
		in_params.fake_morph_4_usrclr_conrtol = fake_morph_4_usrclr_conrtol;

		in_params.damage_tex = damage_tex;
		in_params.damage_uv_scale = damage_uv_scale;
		in_params.damage_uv_src = damage_uv_src;
		in_params.blood_on = blood_on;
		in_params.blood_factor_on = blood_factor_on;
		in_params.carbon_on = carbon_on;
		in_params.carbon_factor_on = carbon_factor_on;
		in_params.cutting_on = cutting_on;
		in_params.cutting_tex = cutting_tex;
		in_params.cutting_uv_scale = cutting_uv_scale;
		in_params.cutting_uv_src = cutting_uv_src;
		in_params.dif_0_um = dif_0_um;
		in_params.nrm_0_um = nrm_0_um;
		
		in_params.soft_alpha_on = soft_alpha_on;
		in_params.sa_radius_scale = sa_radius_scale;
		in_params.sa_sample_count = sa_sample_count;
		in_params.sa_flowmap_tex = sa_flowmap_tex;
		
		in_params.fe_bn_nrm = fe_bn_nrm;
		in_params.fe_bn_msk_0 = fe_bn_msk_0;
		in_params.fe_bn_msk_1 = fe_bn_msk_1;
		in_params.fe_bn_msk_2 = fe_bn_msk_2;
		in_params.fe_bn_msk_3 = fe_bn_msk_3;
		in_params.fe_bn_msk_0_weight = fe_bn_msk_0_weight;
		in_params.fe_bn_msk_1_weight = fe_bn_msk_1_weight;
		in_params.fe_bn_msk_2_weight = fe_bn_msk_2_weight;
		in_params.fe_bn_msk_3_weight = fe_bn_msk_3_weight;
		
		in_params.ice_on = ice_on | b_fr;
		in_params.ice_uv_tile = ice_uv_tile;
		in_params.ice_tex = ice_tex;
		in_params.ice_nrm = ice_nrm;
		in_params.ice_color = ice_color;
		
		
		in_params.breaking_debug = breaking_debug;
		in_params.breaking_tex = breaking_tex;
		in_params.breaking_on = breaking_on;
		in_params.breaking_uv_scale = breaking_uv_scale;
		in_params.player_dissolve_on = player_dissolve_on;
		
		in_params.roughness_control_on = roughness_control_on;
		in_params.roughness_control_channel = roughness_control_channel;
		
		in_params.vs_displace_tex = vs_displace_tex;
		in_params.vs_displace_factor = vs_displace_factor;
		in_params.vs_displace_vector_map = vs_displace_vector_map;
		in_params.vs_displace_uv = vs_displace_uv;
		
			
		standard_opq techniques = new standard_opq(this);
		techniques.setup(in_params);
	}
}
