//new

using engineflags;
using settemplates;
using attribs;

	public class MaskSource : StringVariantConv
	{
		public static object[] Data = { "\"Red_Up\"", "\"Red_Down\"", "\"Green_Up\"", "\"Green_Down\"", "\"Blue_Up\"", "\"Blue_Down\"", "\"Alpha_Up\"", "\"Alpha_Down\"" };
		public override object[] GetData() {return Data;}
	};

template
{
	category Basic
	{
		class Main
		{
			string_dat clr_0_tex = "" : editor(ImageFileNameEditor), display(Color texture);
			string_dat nrm_0_tex = "" : editor(ImageFileNameEditor), display(Base Normal texture);
			string_dat msk_0_tex = "" : editor(ImageFileNameEditor), display(Normal mask texture);
			string_dat nrm_1_tex = "" : editor(ImageFileNameEditor), display(Normal 1);
			string_dat nrm_1_msk = "Red_Up" : converter(MaskSource), display(Normal 1 mask source);
			string_dat nrm_2_tex = "" : editor(ImageFileNameEditor), display(Normal 2);
			string_dat nrm_2_msk = "Red_Down" : converter(MaskSource), display(Normal 2 mask source);
			string_dat nrm_3_tex = "" : editor(ImageFileNameEditor), display(Normal 3);
			string_dat nrm_3_msk = "Green_Up" : converter(MaskSource), display(Normal 3 mask source);
			string_dat nrm_4_tex = "" : editor(ImageFileNameEditor), display(Normal 4);
			string_dat nrm_4_msk = "Green_Down" : converter(MaskSource), display(Normal 4 mask source);
			string_dat nrm_5_tex = "" : editor(ImageFileNameEditor), display(Normal 5);
			string_dat nrm_5_msk = "Blue_Up" : converter(MaskSource), display(Normal 5 mask source);
			string_dat nrm_6_tex = "" : editor(ImageFileNameEditor), display(Normal 6);
			string_dat nrm_6_msk = "Blue_Down" : converter(MaskSource), display(Normal 6 mask source);
			string_dat nrm_7_tex = "" : editor(ImageFileNameEditor), display(Normal 7);
			string_dat nrm_7_msk = "Alpha_Up" : converter(MaskSource), display(Normal 7 mask source);
			float_dat nrm_0_factor = 0.0: display(Nrm scale);

		}
	}
	public void set_src(string_dat src,string_dat def)
	{
		string_dat src_def = "1.0";
		src_def = If(src == "Red_Up",	"msk_h.x", src_def);
		src_def = If(src == "Red_Down",	"msk_l.x", src_def);
		src_def = If(src == "Green_Up",		"msk_h.y", src_def);
		src_def = If(src == "Green_Down",	"msk_l.y", src_def);
		src_def = If(src == "Blue_Up",		"msk_h.z", src_def);
		src_def = If(src == "Blue_Down",	"msk_l.z", src_def);
		src_def = If(src == "Alpha_Up",	"msk_h.w", src_def);
		src_def = If(src == "Alpha_Down",	"msk_l.w", src_def);
		Define(def, src_def);
	}


	templatebody()
	{
		extern float_dat TIME;
		bool_dat nrm_0_on = (((nrm_0_tex != "")|(nrm_1_tex != "")|(nrm_2_tex != "")|(nrm_3_tex != "")|(nrm_4_tex != "")|(nrm_5_tex != "")|(nrm_6_tex != "")|(nrm_7_tex != "")) & (nrm_0_factor > 0.0));
		tech(s_tech_opq)
		{

			set_src(nrm_1_msk,"SRC_1_MSK");
			set_src(nrm_2_msk,"SRC_2_MSK");
			set_src(nrm_3_msk,"SRC_3_MSK");
			set_src(nrm_4_msk,"SRC_4_MSK");
			set_src(nrm_5_msk,"SRC_5_MSK");
			set_src(nrm_6_msk,"SRC_6_MSK");
			set_src(nrm_7_msk,"SRC_7_MSK");

			use SetupMaterial();
			// Cull(NONE);
			DepthFunc(LEQUAL, TRUE);

			AddLine("StencilMarker();");

			Input I_POS_MS = new InputFloat4("POSITION");
			Input I_UV_0 = new InputFloat2("TEXCOORD0");

			Input I_NRM_MS = new InputFloat3("NORMAL0");
			Input I_CLR_USR = new InputFloat4("COLOR_USER");
			Input I_TNG_MS = new InputFloat4("TANGENT0");

			X_UV_0 = SetTexcoord2();
			X_USR_0 = SetTexcoord4();
			X_USR_1 = SetTexcoord4();

			if(clr_0_tex != "")
			{
				S_CLR = SetTexture(clr_0_tex);
			}
			if(msk_0_tex != "")
			{
				S_MSK_0 = SetTexture(msk_0_tex);
			}

			if(nrm_0_on)
			{
				X_NRM_CS = SetTexcoord3("FLOAT");
				X_TNG_CS = SetTexcoord3("FLOAT");
				X_BNR_CS = SetTexcoord3("FLOAT");
				Define("D_NRM_ON", 1);
			}
			else
			{
				X_NRM_OUT = SetTexcoord4("FLOAT");
			}

			if(nrm_0_tex != "")
			{
				S_NRM_0 = SetTexture(nrm_0_tex);
				C_NRM_0_SCALE = SetConst(nrm_0_factor);
			}

			if(nrm_1_tex != ""){S_NRM_1 = SetTexture(nrm_1_tex);}
			if(nrm_2_tex != ""){S_NRM_2 = SetTexture(nrm_2_tex);}
			if(nrm_3_tex != ""){S_NRM_3 = SetTexture(nrm_3_tex);}
			if(nrm_4_tex != ""){S_NRM_4 = SetTexture(nrm_4_tex);}
			if(nrm_5_tex != ""){S_NRM_5 = SetTexture(nrm_5_tex);}
			if(nrm_6_tex != ""){S_NRM_6 = SetTexture(nrm_6_tex);}
			if(nrm_7_tex != ""){S_NRM_7 = SetTexture(nrm_7_tex);}

			float_dat mid_nrm = ((float_dat)mat_dielectric) / 255.0;
            C_NRM_FACTORS = SetConst(0.5, 0.0, mid_nrm); //X: nrm scale/bias, Y: mid scale(zero), Z: MID

			Output O_SPC = new OutputFLOAT4("COLOR0");
			Output O_DIF = new OutputFLOAT4("COLOR1");
			Output O_NRM = new OutputFLOAT4("COLOR2");

			VertexShader()
			{
				use Instancing();

				hlsl()
				{
					#include <master_new.hlsl>

					void main()
					{

						FLOAT4 usr_1 ;
						FLOAT4 usr_0 = Decode_Usr(I_CLR_USR, usr_1);

						X_USR_0 = usr_0;
						X_USR_1 = usr_1;

						float4 pos_ms = Decode_Pos(I_POS_MS);
						float4 pos_ws = Mul_Pos(pos_ms, MODEL_XFORM_4x3);

						V_POS_OUT_TC = Pos_Out_WS(pos_ws);
						float3 nrm_ws = Mul33(I_NRM_MS, MODEL_XFORM_4x3);
						float3 nrm_cs = Mul33(nrm_ws, VIEW_XFORM);
						float3 nrm_n_cs = normalize(nrm_cs);

						#if defined(X_NRM_OUT)
                            X_NRM_OUT = nrm_n_cs.xyzx * C_NRM_FACTORS.xxxy + C_NRM_FACTORS.xxxz;
						#endif

						#if defined(D_NRM_ON)
							X_NRM_CS = nrm_n_cs;
							float3 tng_ws = Mul33(I_TNG_MS.xyz, MODEL_XFORM_4x3);
							float3 tng_cs = Mul33(tng_ws, VIEW_XFORM);
							float3 tng_n_cs = normalize(tng_cs);
							X_TNG_CS = tng_n_cs;

							FLOAT3 bnr_n_cs = cross(nrm_n_cs, tng_n_cs);
							bnr_n_cs *= I_TNG_MS.w;
							X_BNR_CS = bnr_n_cs;
						#endif

						FLOAT2 uv_0 = Decode_UV(I_UV_0);
						X_UV_0 = uv_0 ;

					}
				}
			}

			PixelShader()
			{
				hlsl()
				{
 					#if defined(SHADER_PATH_ORBIS)
						// #pragma PSSL_target_output_format (target 1 FMT_UNORM16_ABGR)
					#endif

					#include <master_new.hlsl>

					void main()
					{
						#if defined(S_MSK_0)
							FLOAT4 msk_0 = Sample(S_MSK_0, X_UV_0);

							FLOAT4 msk_h = saturate(msk_0 * 2.0 - 1.0);
							FLOAT4 msk_l = saturate(-msk_0 * 2.0 + 1.0);


						#endif

						#if defined(S_CLR)
							FLOAT4 clr_0 = Sample(S_CLR, X_UV_0);
						#else
							FLOAT4 clr_0 = 0.5;
						#endif

						O_DIF = clr_0 ;
						O_SPC.w = clr_0.w;
						O_SPC.xyz = SwizzleXXX(0.0);

						#if defined(D_NRM_ON)
							FLOAT3 E2T_XFORM[3];
							E2T_XFORM[0] = X_TNG_CS;
							E2T_XFORM[1] = X_BNR_CS;
							E2T_XFORM[2] = X_NRM_CS;

							FLOAT3 nrm_out_ts = FLOAT3(0.0, 0.0, 1.0);

							FLOAT3 nrm_ts = FLOAT3(0.0, 0.0, 1.0);
							#if defined(S_NRM_0)
								nrm_ts.xy = Sample(S_NRM_0, X_UV_0).ag * 2.0 - 1.0;
								nrm_ts.xy *= C_NRM_0_SCALE;
								nrm_out_ts.xy = nrm_ts.xy;
							#endif


							#if defined(S_NRM_1)
								FLOAT2 nrm_1 = Sample(S_NRM_1, X_UV_0).ag * 2.0 - 1.0;
								nrm_1 *= X_USR_0.x;
								#if defined(S_MSK_0)
									nrm_1 *= SRC_1_MSK;
								#endif
								nrm_out_ts.xy += nrm_1;
							#endif
							#if defined(S_NRM_2)
								FLOAT2 nrm_2 = Sample(S_NRM_2, X_UV_0).ag * 2.0 - 1.0;
								nrm_2 *= X_USR_0.y ;
								#if defined(S_MSK_0)
									nrm_2 *= SRC_2_MSK;
								#endif
								nrm_out_ts.xy += nrm_2;
							#endif
							#if defined(S_NRM_3)
								FLOAT2 nrm_3 = Sample(S_NRM_3, X_UV_0).ag * 2.0 - 1.0;
								nrm_3 *= X_USR_0.z;
								#if defined(S_MSK_0)
									nrm_3 *= SRC_3_MSK;
								#endif
								nrm_out_ts.xy += nrm_3;
							#endif
							#if defined(S_NRM_4)
								FLOAT2 nrm_4 = Sample(S_NRM_4, X_UV_0).ag * 2.0 - 1.0;
								nrm_4 *= X_USR_0.a ;
								#if defined(S_MSK_0)
									nrm_4 *= SRC_4_MSK;
								#endif
								nrm_out_ts.xy += nrm_4;
							#endif
							#if defined(S_NRM_5)
								FLOAT2 nrm_5 = Sample(S_NRM_5, X_UV_0).ag * 2.0 - 1.0;
								nrm_5 *= X_USR_1.x ;
								#if defined(S_MSK_0)
									nrm_5 *= SRC_5_MSK;
								#endif
								nrm_out_ts.xy += nrm_5;
							#endif
							#if defined(S_NRM_6)
								FLOAT2 nrm_6 = Sample(S_NRM_6, X_UV_0).ag * 2.0 - 1.0;
								nrm_6 *= X_USR_1.y ;
								#if defined(S_MSK_0)
									nrm_6 *= SRC_6_MSK;
								#endif
								nrm_out_ts.xy += nrm_6;
							#endif
							#if defined(S_NRM_7)
								FLOAT2 nrm_7 = Sample(S_NRM_7, X_UV_0).ag * 2.0 - 1.0;
								nrm_7 *= X_USR_1.z ;
								#if defined(S_MSK_0)
									nrm_7 *= SRC_7_MSK;
								#endif
								nrm_out_ts.xy += nrm_7;
							#endif
							nrm_out_ts = normalize(nrm_out_ts);
							FLOAT3 nrm_cs = Mul33T(nrm_out_ts, E2T_XFORM);
							FLOAT3 nrm_n_cs = normalize(nrm_cs);

							O_NRM = nrm_n_cs.xyzx * C_NRM_FACTORS.xxxy + C_NRM_FACTORS.xxxz;
						#endif

						#if defined(X_NRM_OUT)
							O_NRM = X_NRM_OUT;
						#endif




					}
				}
			}
		}
	}
}
